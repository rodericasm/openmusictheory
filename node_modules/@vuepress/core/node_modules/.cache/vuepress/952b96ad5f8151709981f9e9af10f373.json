{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\smallTernary.md?vue&type=template&id=2fead713&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\smallTernary.md","mtime":1588346367725},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkxpa2UgdGhlIHNtYWxsZXIgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvc2VudGVuY2UuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigic2VudGVuY2UiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvcGVyaW9kLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoInBlcmlvZCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiLCBhbmQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvaHlicmlkVGhlbWVzLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImh5YnJpZCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGVtZXMsIHRoZSBzbWFsbCB0ZXJuYXJ5IGNhbiBhY3QgYWxvbmUgYXMgdGhlIHRoZW1lIG9mIGEgZnVsbC1tb3ZlbWVudCBmb3JtLiBUaGUgc21hbGwgdGVybmFyeSBpcyBsYXJnZXIsIGhvd2V2ZXItLWNvbnN0cnVjdGVkIGZyb20gdGhlbWVzIGp1c3QgYXMgdGhlIHNtYWxsZXIgdGhlbWUgdHlwZXMgd2VyZSBjb25zdHJ1Y3RlZCBmcm9tIHBocmFzZXMgYW5kIHN1Yi1waHJhc2VzLiBBcyBhIHNsaWdodGx5IGxhcmdlciBzdHJ1Y3R1cmUsIHRoaXMgdGhlbWUgdHlwZSBpbnZvbHZlcyBpbnRlcmVzdGluZyBxdWVzdGlvbnMgYWJvdXQgZm9ybWFsIG9yZ2FuaXphdGlvbiBhbmQgcGVyY2VwdGlvbi0tcXVlc3Rpb25zIHRoYXQgc3RlbSBmcm9tIGl0cyBoaXN0b3JpY2FsIHBlZGlncmVlIGFtb25nIG90aGVyIHRoaW5ncy0tdGhhdCB3ZSB3aWxsIGFsc28gZmluZCBpbiB0aGUgZnVsbC1tb3ZlbWVudCBmb3Jtcy4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJUaGlzIHRoZW1lIHR5cGUgaXMgbm9ybWFsbHkgZXhwcmVzc2VkIHRocm91Z2ggdGhyZWUgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvdGhlbWVGdW5jdGlvbnMuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigidGhlbWF0aWMgZnVuY3Rpb25zIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnOiAiZXhwb3NpdGlvbiAoQSksIiAiY29udHJhc3RpbmcgbWlkZGxlIChCKSwiIGFuZCAicmVjYXBpdHVsYXRpb24gKEEpLiInCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICJHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvc21hbGxUZXJuYXJ5LnBuZyIgfQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgW192bS5fdigiVGhlIHNtYWxsIHRlcm5hcnkiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCIjIyNUaHJlZSB0aGVtYXRpYyBmdW5jdGlvbnNcblRoZSAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJleHBvc2l0aW9uIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigicmVjYXBpdHVsYXRpb24iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgYXJlICJ0aWdodC1rbml0IiBmdW5jdGlvbnMgdXN1YWxseSBleHByZXNzZWQgYnkgb25lIG9mIHRoZSBzbWFsbGVyIHRoZW1lIHR5cGVzLiBFYWNoIGVuZHMgd2l0aCBhIGNhZGVuY2UuIE1vc3QgY29tbW9ubHksIGEgc21hbGwtdGVybmFyeVwncyAnCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJleHBvc2l0aW9uIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdpbGwgZW5kIHdpdGggYSBJOlBBQywgYnV0IHRoZSBleHBvc2l0aW9uIG1heSBhbHNvIG1vZHVsYXRlIHRvIGEgY2xvc2VseSByZWxhdGVkIGtleS4gSW4gbWFqb3ItbW9kZSBwaWVjZXMsIGEgdHlwaWNhbCBtb2R1bGF0aW9uIHdpbGwgeWllbGQgYW4gZXhwb3NpdGlvbiBlbmRpbmcgd2l0aCBhIFY6UEFDLCB3aGlsZSBpbiB0aGUgbWlub3IgbW9kZSwgdGhlIG1lZGlhbnQgKElJSTpQQUMpIGtleSBhcmVhIGlzIG1vcmUgY29tbW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiQSAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInJlY2FwaXR1bGF0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiIGZvbGxvd3MgdGhlICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiY29udHJhc3RpbmcgbWlkZGxlIildKSwKICAgICAgICAgIF92bS5fdigiIGFuZCBpcyBtYXJrZWQgYnkgYSByZXR1cm4gb2YgdGhlbWF0aWMgbWF0ZXJpYWwgZnJvbSB0aGUgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJleHBvc2l0aW9uIildKSwKICAgICAgICAgIF92bS5fdigiLiBJbiB0aGUgc2ltcGxlc3QgZXhhbXBsZXMsIGEgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyZWNhcGl0dWxhdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBtYXkgc2ltcGx5IGNvcHkgdGhlICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiZXhwb3NpdGlvbi4iKV0pLAogICAgICAgICAgX3ZtLl92KCIgQnV0IG1vcmUgY29tbW9ubHksIHNvbWUgY2hhbmdlcyBhcmUgbWFkZSwgaW5jbHVkaW5nICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL2ludGVybmFsRXhwYW5zaW9ucy5odG1sIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJleHBhbnNpb25zIGFuZCBjb250cmFjdGlvbnMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIEFsdGVyYXRpb25zIGFyZSBlc3BlY2lhbGx5IGNvbW1vbi0tbmVjZXNzYXJ5LCBpbiBmYWN0LS13aGVuIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiZXhwb3NpdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBjYWRlbmNlcyBpbiBhIG5vbi10b25pYyBrZXk6ICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiUmVjYXBpdHVsYXRpb24ncyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgaW52YXJpYWJseSBjbG9zZSB3aXRoIGEgSTpQQUMsIGFuZCB0aHVzLCBpZiB0aGUgZXhwb3NpdGlvbiBoYXMgbW9kdWxhdGVkLCB0aGUgcmVjYXBpdHVsYXRpb24gbXVzdCBiZSBhbHRlcmVkIHRvIGVuZCBpbiB0b25pYy4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJMb2NhdGVkIGJldHdlZW4gdGhlICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiZXhwb3NpdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyZWNhcGl0dWxhdGlvbiwiKV0pLAogICAgICAgICAgX3ZtLl92KCIgdGhlICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiY29udHJhc3RpbmcgbWlkZGxlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyBpcyBhICJsb29zZSIgZm9ybWFsIHJlZ2lvbiB0aGF0IHByb3ZpZGVzIG1lbG9kaWMgYW5kIGhhcm1vbmljIGNvbnRyYXN0LiBCZWNhdXNlIGl0IGlzIGEgbG9vc2VyIHJlZ2lvbiwgaXQgaXMgbm90IGNvbW1vbmx5IGV4cHJlc3NlZCBieSBhIHRoZW1lIHR5cGUuIElmIGFueXRoaW5nLCB1bnByZWRpY3RhYmlsaXR5IGlzIHR5cGljYWwuIE5vbmV0aGVsZXNzLCB3ZSBjYW4gb2Z0ZW4gY2hhcmFjdGVyaXplIHN1Y2ggcGFzc2FnZXMgaW4gdGVybXMgb2YgImxvb3NlbmluZyBkZXZpY2VzIiBsaWtlIGZyYWdtZW50YXRpb24sIHNlcXVlbmNlLCBhbmQgbW9kdWxhdGlvbi4gQW5kIGFzIGEgbWVhbnMgb2YgcHJvdmlkaW5nIGhhcm1vbmljIGNvbnRyYXN0LCAnCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiY29udHJhc3RpbmcgbWlkZGxlcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgdGVuZCB0byBlbXBoYXNpemUgZG9taW5hbnQgaGFybW9ueS4gVG8gbWFyayB0aGVpciBlbmQsIHByb3ZpZGUgY29udHJhc3QsIGFuZCBjcmVhdGUgYW50aWNpcGF0aW9uIGZvciB0aGUgcmV0dXJuIG9mIHRvbmljIGluIHRoZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigicmVjYXBpdHVsYXRpb24sIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiB0aGVzZSBzZWN0aW9ucyBpbnZhcmlhYmx5IGhhdmUgZG9taW5hbnQgaGFybW9ueSBhdCB0aGVpciBjbG9zZS4gVGhpcyBtYXkgYmUgZXhwcmVzc2VkIGFzIGEgSTpIQywgVjpQQUMsIG9yIGluIHNpbXBsZXIgY2FzZXMsIHRoZSBlbnRpcmUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImNvbnRyYXN0aW5nIG1pZGRsZSIpXSksCiAgICAgICAgICBfdm0uX3YoJyBtYXkgcHJvbG9uZyBkb21pbmFudCBoYXJtb255IHRocm91Z2ggYSAiJyksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2V4dGVybmFsRXhwYW5zaW9ucy5odG1sI3N1ZmZpeCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJzdGFuZGluZyBvbiB0aGUgZG9taW5hbnQiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoJy4iJykKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJhbi1leGFtcGxlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNhbi1leGFtcGxlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBbiBleGFtcGxlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL2Zvcm0vazI4NC5wbmciIH0gfSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdNb3phcnQsIFBpYW5vIFNvbmF0YSBpbiBEIG1ham9yLCBLLiAyODQsICJUZW1hIGNvbiB2YXJpYXppb25lIicKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBIHByb3RvdHlwaWNhbCBleGFtcGxlIGlzIGdpdmVuIGFib3ZlLS10aGUgXCJ0aGVtZVwiIG9mIHRoZSB2YXJpYXRpb24gbW92ZW1lbnQgY2xvc2luZyBNb3phcnQncyBQaWFubyBTb25hdGEgaW4gRCBtYWpvciwgSy4gMjg0LiBNb3phcnQncyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiZXhwb3NpdGlvbiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgaXMgYSBzaW1wbGUgcGVyaW9kIHdob3NlIHNlY29uZCBoYWxmIG1vZHVsYXRlcyB0byB0aGUgZG9taW5hbnQsIGVuZGluZyB3aXRoIGEgVjpQQUMuIEZvbGxvd2luZyB0aGUgcmVwZWF0LCB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImNvbnRyYXN0aW5nIG1pZGRsZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBiZWdpbnMgd2l0aCBhICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9zY2hlbWF0YUNvbnRpbnVhdGlvblBhdHRlcm5zLmh0bWwiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImZvbnRlIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgc2VxdWVuY2UgdGhhdCBsZWFkcyB0byBhIGZyYWdtZW50ZWQsIGRlc2NlbmRpbmcgc2NhbGFyIHBhc3NhZ2UgdGhhdCBjbG9zZXMgdGhlIHNlY3Rpb24gd2l0aCBhIEk6SEMuIChOb3RlIHRoZSBtb3RpdmljIHJlbGF0aW9uc2hpcHMgdG8gdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJleHBvc2l0aW9uIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjogdGhlIGRlc2NlbmRpbmcgc2NhbGUgaW4gbS4gMTAgcmVjYWxscyB0aGUgcGlja3VwIHRvIG0uIDcsIGFuZCB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImZvbnRlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBzZXRzIGEgbWVsb2RpYyBtb3RpdmUgdGhhdCByZXNlbWJsZXMgdGhlIGZpcnN0IHR3byBiZWF0cyBvZiBtLiA3LikgRmluYWxseSwgdGhlIHJlY2FwaXR1bGF0aW9uIHJlY2FsbHMgdGhlIGV4cG9zaXRpb24uIEl0IHByZXNlbnRzIG9ubHkgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJjb250cmFzdGluZyBwaHJhc2UiKV0pLAogICAgICAgICAgX3ZtLl92KCIsIGhvd2V2ZXIsIGFsdGVyaW5nIGl0IHNvIHRoYXQgdGhlIHRoZW1lIGVuZHMgd2l0aCBhIEk6UEFDLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYmluYXJ5LWNoYXJhY3RlcmlzdGljcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYmluYXJ5LWNoYXJhY3RlcmlzdGljcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJpbmFyeSBjaGFyYWN0ZXJpc3RpY3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJNb3phcnQncyB0aGVtZSBnaXZlcyB1cyBhbiBleGFtcGxlIG9mIG9uZSBvZiB0aGUgbW9zdCBjb21tb24gY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBzbWFsbCB0ZXJuYXJ5OiB0aGUgcmVwZWF0IHNpZ25zLiBUaG9zZSByZXBlYXQgc2lnbnMgZGl2aWRlIHRoZSBmb3JtIGludG8gIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigidHdvIHBhcnRzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBhbmQgdGhlcmVpbiBsaWVzIG9uZSBvZiB0aGUgbW9zdCBkaXNjdXNzZWQgKGFuZCBwZXJoYXBzLCBtb3N0IGNvbnRyb3ZlcnNpYWwgYW5kIGNvbmZ1c2luZykgZmVhdHVyZXMgb2YgdGhpcyB0aGVtYXRpYyB0eXBlLiBCZWNhdXNlIG9uIHRoZSBsYXJnZXN0IHNjYWxlIHRoZSB0aHJlZSBwYXJ0cyBvZiB0aGlzIHRoZW1lIGFyZSBuZXN0ZWQgd2l0aGluICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInR3byByZXByaXNlcyIpXSksCiAgICAgICAgX3ZtLl92KCIsIG1hbnkgbXVzaWMgdGhlb3Jpc3RzIHByZWZlciB0byBsYWJlbCB0aGVzZSBwYXNzYWdlcyBhcyAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJiaW5hcmllcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gU2luY2Ugd2UgaGF2ZSBjaG9zZW4gdG8gZW1waGFzaXplIHRoZSBmdW5jdGlvbmFsIGNoYXJhY3RlcmlzdGljcyBvZiBjbGFzc2ljYWwgZm9ybSwgb2Ygd2hpY2ggdGhlcmUgYXJlIHRocmVlIGluIHRoaXMgcGFzc2FnZSwgdGhlIHRlcm5hcnkgdW5kZXJzdGFuZGluZyBpcyBtb3JlIGFwcHJvcHJpYXRlIGhlcmUuIFRocm91Z2hvdXQgdGhlIGhpc3Rvcnkgb2YgbXVzaWMsIHdlIGFsc28gZmluZCBleGFtcGxlcyB3aXRob3V0IHJlcGVhdHMgKG9yIHdpdGggcGVyaGFwcyBvbmx5IG9uZSByZXBlYXQpLCBhbmQgdGhvc2UgZXhhbXBsZXMgZXN0YWJsaXNoIHRoZSByZXBlYXQgc2lnbnMgYXMgYSBub24tb2JsaWdhdG9yeSBmZWF0dXJlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJ1dCByYXRoZXIgdGhhbiBzZXR0bGluZyB0aGUgcXVlc3Rpb24sIHNvcGhpc3RpY2F0ZWQgYW5hbHlzdHMgdGVuZCB0byB1bmRlcnN0YW5kIHRoZSBhbWJpZ3VpdHkgcHJlc2VudCBoZXJlLiBBcyBhIGNvbW1vbiBoZWRnZSwgbWFueSBtdXNpYyB0aGVvcmlzdHMgbGFiZWwgcGFzc2FnZXMgbGlrZSBNb3phcnQncyAodGhvc2Ugd2l0aCBhbiAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJleHBvc2l0aW9uIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiY29udHJhc3RpbmcgbWlkZGxlIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigicmVjYXBpdHVsYXRpb24iKV0pLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJhbmQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgcmVwZWF0IHNpZ25zKSBhcyAicm91bmRlZCBiaW5hcmllcy4iIFRoZSAicm91bmRlZCIgZGVzY3JpcHRpb24gcmVmZXJzIHRvIHRoZSByZXR1cm4gb2YgdGhlIGV4cG9zaXRpb24gbWF0ZXJpYWwgYXQgdGhlIGZvcm1cJ3MgZW5kLCB3aGljaCBoYXMgdGhlIGVmZmVjdCBvZiAicm91bmRpbmcgb3V0IiB0aGUgc3RydWN0dXJlLicKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}