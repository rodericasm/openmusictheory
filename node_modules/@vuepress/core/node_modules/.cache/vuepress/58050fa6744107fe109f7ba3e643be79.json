{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\firstSpecies.md?vue&type=template&id=9177a10a&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\firstSpecies.md","mtime":1588249840918},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQ291bnRlcnBvaW50IGlzIHRoZSBtZWRpYXRpb24gb2YgdHdvIG9yIG1vcmUgbXVzaWNhbCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJsaW5lcyIpXSksCiAgICAgICAgX3ZtLl92KCIgaW50byBhIG1lYW5pbmdmdWwgYW5kIHBsZWFzaW5nICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIndob2xlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBJbiBmaXJzdC1zcGVjaWVzIGNvdW50ZXJwb2ludCwgd2Ugbm90IG9ubHkgd3JpdGUgYSBzbW9vdGggbWVsb2R5IHRoYXQgaGFzIGl0cyBvd24gaW50ZWdyaXR5IG9mIHNoYXBlLCB2YXJpZXR5LCBhbmQgZ29hbC1kaXJlY3RlZCBtb3Rpb24sIGJ1dCB3ZSBhbHNvIHdyaXRlIGEgc2Vjb25kIG1lbG9keSB0aGF0IGNvbnRhaW5zIHRoZXNlIHRyYWl0cy4gRnVydGhlciwgYW5kIG1vc3QgaW1wb3J0YW50bHksIHdlIGNvbWJpbmUgdGhlc2UgbWVsb2RpZXMgdG8gY3JlYXRlIGEgd2hvbGUgdGV4dHVyZSB0aGF0IGlzIHNtb290aCwgZXhoaWJpdHMgdmFyaWV0eSBhbmQgZ29hbC1vcmllbnRlZCBtb3Rpb24sIGFuZCBpbiB3aGljaCB0aGVzZSBtZWxvZGllcyBib3RoIG1haW50YWluIHRoZWlyIGluZGVwZW5kZW5jZSBhbmQgZnVzZSB0b2dldGhlciBpbnRvIGNvbnNvbmFudCAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJzaW11bHRhbmVpdGllcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAodGhlIGdlbmVyYWwgdGVybSBmb3IgdHdvIG9yIG1vcmUgbm90ZXMgc291bmRpbmcgYXQgdGhlIHNhbWUgdGltZSkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkluIGZpcnN0IHNwZWNpZXMgY291bnRlcnBvaW50LCB3ZSBiZWdpbiB3aXRoIGEgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiY2FudHVzIGZpcm11cyIpXSksCiAgICAgICAgX3ZtLl92KCIgKG5ldyBvciBleGlzdGluZykgYW5kIGNvbXBvc2UgYSBzaW5nbGUgbmV3IGxpbmXigJRjYWxsZWQgdGhlICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImNvdW50ZXJwb2ludCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIuKAlGFib3ZlIG9yIGJlbG93IHRoZSBjYW50dXMgZmlybXVzLiBUaGF0IG5ldyBsaW5lIGNvbnRhaW5zIG9uZSBub3RlIGZvciBldmVyeSBub3RlIGluIHRoZSBjYW50dXM6IGJvdGggdGhlIGNhbnR1cyBmaXJtdXMgYW5kIHRoZSBjb3VudGVycG9pbnQgd2lsbCBiZSBhbGwgd2hvbGUgbm90ZXMuIFRodXMsIGZpcnN0IHNwZWNpZXMgaXMgc29tZXRpbWVzIGNhbGxlZCBvbmUtYWdhaW5zdC1vbmUgb3IgMToxIGNvdW50ZXJwb2ludC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0aGUtY291bnRlcnBvaW50LWxpbmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3RoZS1jb3VudGVycG9pbnQtbGluZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRoZSBjb3VudGVycG9pbnQgbGluZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIGdlbmVyYWwsIHRoZSBjb3VudGVycG9pbnQgc2hvdWxkIGZvbGxvdyB0aGUgcHJpbmNpcGxlcyBvZiBbd3JpdGluZyBhIGdvb2QgY2FudHVzIGZpcm11c11bY2FudHVzZmlybXVzLmh0bWxdLiBUaGVyZSBhcmUgc29tZSBtaW5vciBkaWZmZXJlbmNlcywgdG8gYmUgZGlzY3Vzc2VkIGJlbG93LCBidXQgZ2VuZXJhbGx5IGEgZmlyc3Qtc3BlY2llcyBjb3VudGVycG9pbnQgc2hvdWxkIGNvbnNpc3Qgb2YgdHdvIGNhbnR1cy1maXJtdXMtcXVhbGl0eSBsaW5lcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJiZWdpbm5pbmctYS1maXJzdC1zcGVjaWVzLWNvdW50ZXJwb2ludCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYmVnaW5uaW5nLWEtZmlyc3Qtc3BlY2llcy1jb3VudGVycG9pbnQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCZWdpbm5pbmcgYSBmaXJzdC1zcGVjaWVzIGNvdW50ZXJwb2ludCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvIGV4ZW1wbGlmeSBnb2FsLW9yaWVudGVkIG1vdGlvbiwgdGhlIGZpcnN0LXNwZWNpZXMgZXhlcmNpc2Ugc2hvdWxkIGJlZ2luIGFuZCBlbmQgd2l0aCB0aGUgbW9zdCBzdGFibGUgb2Ygc29ub3JpdGllczogcGVyZmVjdCBjb25zb25hbmNlcy4gVGh1cywgd2hlbiB3cml0aW5nIGEgY291bnRlcnBvaW50ICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImFib3ZlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGEgY2FudHVzIGZpcm11cywgdGhlIGZpcnN0IG5vdGUgb2YgdGhlIGNvdW50ZXJwb2ludCBzaG91bGQgYmUgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiIG9yICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInNvbCIpXSksCiAgICAgICAgX3ZtLl92KCIgKGEgUDEsIFA1LCBvciBQOCBhYm92ZSB0aGUgY2FudHVzKS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiV2hlbiB3cml0aW5nIGEgY291bnRlcnBvaW50ICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImJlbG93IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGEgY2FudHVzIGZpcm11cywgdGhlIGZpcnN0IG5vdGUgb2YgdGhlIGNvdW50ZXJwb2ludCBtdXN0IGFsd2F5cyBiZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkbyIpXSksCiAgICAgICAgX3ZtLl92KCIgKFAxIG9yIFA4IGJlbG93IHRoZSBjYW50dXMpLiAoQmVnaW5uaW5nIG9uICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInNvbCIpXSksCiAgICAgICAgX3ZtLl92KCIgd291bGQgY3JlYXRlIGEgZGlzc29uYW50IGZvdXJ0aDsgYmVnaW5uaW5nIG9uICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImZhIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHdvdWxkIGNyZWF0ZSBhIFA1IGJ1dCBjb25mdXNlIGxpc3RlbmVycyBhYm91dCB0aGUgdG9uYWwgY29udGV4dCwgc2luY2UgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZmHigJNkbyIpXSksCiAgICAgICAgX3ZtLl92KCIgYXQgdGhlIGJlZ2lubmluZyBvZiBhIHBpZWNlIGlzIGVhc2lseSBtaXNoZWFyZCBhcyAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkb+KAk3NvbCIpXSksCiAgICAgICAgX3ZtLl92KCIuKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImVuZGluZy1hLWZpcnN0LXNwZWNpZXMtY291bnRlcnBvaW50IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlbmRpbmctYS1maXJzdC1zcGVjaWVzLWNvdW50ZXJwb2ludCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEVuZGluZyBhIGZpcnN0LXNwZWNpZXMgY291bnRlcnBvaW50IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSBmaW5hbCBub3RlIG9mIHRoZSBjb3VudGVycG9pbnQgbXVzdCBhbHdheXMgYmUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiIChQMSBvciBQOCBhYm92ZS9iZWxvdyB0aGUgY2FudHVzKS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBhcHByb2FjaCB0aGlzIGVuZGluZyBzbW9vdGhseSwgd2l0aCB2YXJpZXR5LCBhbmQgd2l0aCBzdHJvbmcgZ29hbCBvcmllbnRhdGlvbiwgYWx3YXlzIGFwcHJvYWNoIHRoZSBmaW5hbCBpbnRlcnZhbCBieSBjb250cmFyeSBzdGVwd2lzZSBtb3Rpb24uIElmIHRoZSBjYW50dXMgZW5kcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyZSIpXSksCiAgICAgICAgX3ZtLl92KCLigJMiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkbyIpXSksCiAgICAgICAgX3ZtLl92KCIsIHRoZSBjb3VudGVycG9pbnQncyBmaW5hbCB0d28gcGl0Y2hlcyBzaG91bGQgYmUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigidGkiKV0pLAogICAgICAgIF92bS5fdigi4oCTIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiLiBJZiB0aGUgY2FudHVzIGVuZHMgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigidGkiKV0pLAogICAgICAgIF92bS5fdigi4oCTIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiLCB0aGUgY291bnRlcnBvaW50J3MgZmluYWwgdHdvIHBpdGNoZXMgc2hvdWxkIGJlICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInJlIildKSwKICAgICAgICBfdm0uX3YoIuKAkyIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImRvIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBUaHVzIHRoZSBwZW51bHRpbWF0ZSBiYXIgd2lsbCBlaXRoZXIgYmUgYSBtaW5vciB0aGlyZCBvciBhIG1ham9yIHNpeHRoIGJldHdlZW4gdGhlIHR3byBsaW5lcy4gVGhpcyBpcyB0aGUgY2FzZSBmb3IgYm90aCBtYWpvciBhbmQgbWlub3Iga2V5cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpbmRlcGVuZGVuY2Utb2YtdGhlLWxpbmVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpbmRlcGVuZGVuY2Utb2YtdGhlLWxpbmVzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSW5kZXBlbmRlbmNlIG9mIHRoZSBsaW5lcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxpa2UgdGhlIGNhbnR1cyBmaXJtdXMsIHRoZSBjb3VudGVycG9pbnQgc2hvdWxkIGhhdmUgYSBzaW5nbGUgY2xpbWF4LiBUbyBtYWludGFpbiB0aGUgaW5kZXBlbmRlbmNlIG9mIHRoZSBsaW5lcyBhbmQgdGhlIHNtb290aG5lc3Mgb2YgdGhlIGVudGlyZSBwYXNzYWdlIChzbyBubyBvbmUgbW9tZW50IGlzIGh5cGVyLWVtcGhhc2l6ZWQgYnkgYSBkb3VibGUgY2xpbWF4KSwgdGhlc2UgY2xpbWF4ZXMgc2hvdWxkIG5vdCBjb2luY2lkZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBIHNpbmdsZSByZXBlYXQvdGllIGluIHRoZSBjb3VudGVycG9pbnQgaXMgYWxsb3dlZCwgYnV0IHRyeSB0byBhdm9pZCByZXBlYXRpbmcgYXQgYWxsLiBUaGlzIHByb21vdGVzIHZhcmlldHkgaW4gdGhlIGV4ZXJjaXNlLCBzaW5jZSB0aGVyZSBhcmUgc28gZmV3IG5vdGVzIHRvIGJlZ2luIHdpdGguIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkF2b2lkICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInZvaWNlIGNyb3NzaW5nIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB3aGVyZSB0aGUgdXBwZXIgdm9pY2UgaXMgdGVtcG9yYXJpbHkgbG93ZXIgdGhhbiB0aGUgbG93ZXIgdm9pY2UsIGFuZCAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJ2aWNlIHZlcnNhIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBWb2ljZSBjcm9zc2luZ3MgZGltaW5pc2ggdGhlIGluZGVwZW5kZW5jZSBvZiB0aGUgbGluZXMgYW5kIG1ha2UgdGhlbSBtb3JlIGRpZmZpY3VsdCB0byBkaXN0aW5ndWlzaCBieSBlYXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkF2b2lkICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInZvaWNlIG92ZXJsYXAiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHdoZXJlIG9uZSB2b2ljZSBsZWFwcyBwYXN0IHRoZSBwcmV2aW91cyBub3RlIG9mIHRoZSBvdGhlciB2b2ljZS4gRm9yIGV4YW1wbGUsIGlmIHRoZSB1cHBlciBwYXJ0IHNpbmdzIGFuIEU0LCB0aGUgbG93ZXIgcGFydCBjYW5ub3Qgc2luZyBhbiBGNCBpbiB0aGUgZm9sbG93aW5nIGJhci4gVGhpcyBhbHNvIGhlbHBzIG1haW50YWluIHRoZSBpbmRlcGVuZGVuY2Ugb2YgdGhlIGxpbmVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImludGVydmFscy1hbmQtbW90aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpbnRlcnZhbHMtYW5kLW1vdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEludGVydmFscyBhbmQgbW90aW9uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnVGhlIGludGVydmFsIGJldHdlZW4gdGhlIGNhbnR1cyBhbmQgY291bnRlcnBvaW50IGF0IGFueSBtb21lbnQgc2hvdWxkIG5vdCBleGNlZWQgYSBwZXJmZWN0IHR3ZWxmdGggKG9jdGF2ZSBwbHVzIGZpZnRoKS4gSW4gZ2VuZXJhbCwgdHJ5IHRvIGtlZXAgdGhlIHR3byBsaW5lcyB3aXRoaW4gYW4gb2N0YXZlIHdoZXJlIHBvc3NpYmxlLCBhbmQgb25seSBleGNlZWQgYSB0ZW50aCBpbiAiZW1lcmdlbmNpZXMsIiBhbmQgb25seSBicmllZmx5IChvbmUgb3IgdHdvIG5vdGVzKS4gV2hlbiB0aGUgdm9pY2VzIGFyZSB0b28gZmFyIGFwYXJ0LCB0b25hbCBmdXNpb24gaXMgZGltaW5pc2hlZC4gRnVydGhlciwgaXQgY2FuIGRpbWluaXNoICcKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInBlcmZvcm1hYmlsaXR5IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB3aGljaCB0aG91Z2ggbm90IGFuIGVzc2VudGlhbCBwcmluY2lwbGUgb2YgaHVtYW4gY29nbml0aW9uIGlzIGFuIGltcG9ydGFudCBjb25zaWRlcmF0aW9uIGZvciBjb21wb3NlcnMsIGFuZCBpdCBoYXMgYSBkaXJlY3QgZWZmZWN0IG9uIHRoZSBzbW9vdGhuZXNzLCBtZWxvZGljIGludGVncml0eSwgYW5kIHRvbmFsIGZ1c2lvbiBvZiB3aGF0IGxpc3RlbmVycyBoZWFyIGR1cmluZyBhIHBlcmZvcm1hbmNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiBnZW5lcmFsLCBhbGwgaGFybW9uaWMgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiY29uc29uYW5jZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYXJlIGFsbG93ZWQuIEhvd2V2ZXIsIHVuaXNvbnMgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgZmlyc3QgYW5kIGxhc3QgaW50ZXJ2YWxzLiBVbmlzb25zIGFyZSB2ZXJ5IHN0YWJsZSwgYW5kIHNlcnZlIGJlc3QgYXMgZ29hbHMgcmF0aGVyIHRoYW4gbWlkIHBvaW50cy4gVGhleSBhbHNvIGRpbWluaXNoIHRoZSBpbmRlcGVuZGVuY2Ugb2YgdGhlIGxpbmVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiSW1wZXJmZWN0IGNvbnNvbmFuY2VzIildKSwKICAgICAgICBfdm0uX3YoIiBhcmUgcHJlZmVyYWJsZSB0byAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJwZXJmZWN0IGNvbnNvbmFuY2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGZvciBhbGwgaW50ZXJ2YWxzIG90aGVyIHRoYW4gdGhlIGZpcnN0IGFuZCBsYXN0IGR5YWRzLCBpbiBvcmRlciB0byBoZWlnaHRlbiB0aGUgc2Vuc2Ugb2YgYXJyaXZhbCBhdCB0aGUgZW5kLCBhbmQgdG8gcHJvbW90ZSBhIHNlbnNlIG9mIG1vdGlvbiB0b3dhcmRzIHRoYXQgYXJyaXZhbC4gSW4gYWxsIGNhc2VzLCBhaW0gZm9yIGEgdmFyaWV0eSBvZiBoYXJtb25pYyBpbnRlcnZhbHMgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBleGVyY2lzZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIk5ldmVyLCBldmVyLCBldmVyIildKSwKICAgICAgICBfdm0uX3YoIiB1c2UgdHdvIHBlcmZlY3QgY29uc29uYW5jZXMgb2YgdGhlIHNhbWUgc2l6ZSBpbiBhIHJvdzogIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlA14oCTUDUiKV0pLAogICAgICAgIF92bS5fdigiIG9yICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQOOKAk1A4IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBUaGlzIGluY2x1ZGVzIGJvdGggc2ltcGxlIGFuZCBjb21wb3VuZCBpbnRlcnZhbHMuIEZvciBleGFtcGxlLCAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUDXigJNQMTIiKV0pLAogICAgICAgIF92bS5fdigiIGlzIGNvbnNpZGVyZWQgdGhlIHNhbWUgYXMgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlA14oCTUDUiKV0pLAogICAgICAgIF92bS5fdigiLiAoVHdvIGRpZmZlcmVudCBwZXJmZWN0IGNvbnNvbmFuY2VzIGluIGEgcm93LCBzdWNoIGFzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQOOKAk1A1IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnLCBpcyBhbGxvd2VkLCBob3dldmVyLCBidXQgdHJ5IHRvIGZvbGxvdyBldmVyeSBwZXJmZWN0IGNvbnNvbmFuY2Ugd2l0aCBhbiBpbXBlcmZlY3QgY29uc29uYW5jZSBpZiBwb3NzaWJsZS4pIFRoZXNlICJwYXJhbGxlbCBmaWZ0aHMgYW5kIG9jdGF2ZXMiIHNpZ25pZmljYW50bHkgcHJvbW90ZSB0b25hbCBmdXNpb24gb3ZlciBtZWxvZGljIGluZGVwZW5kZW5jZSBhdCB0aGUgc2FtZSB0aW1lIHRoYXQgdGhlIGNvbnNlY3V0aXZlIHN0YWJsZSBzb25vcml0aWVzIGFycmVzdCBib3RoIHRoZSB2YXJpZXR5IGFuZCB0aGUgbW90aW9uIG9mIHRoZSBleGVyY2lzZS4gVGh1cywgdGhleSBhcmUgZmFyIGZyb20gaWRlYWwsIGFuZCB0byBiZSBhdm9pZGVkIGluIHNwZWNpZXMgY291bnRlcnBvaW50LicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlZhcnkgdGhlIHR5cGVzIG9mIG1vdGlvbiBiZXR3ZWVuIHN1Y2Nlc3NpdmUgaW50ZXJ2YWxzIChwYXJhbGxlbCwgc2ltaWxhciwgY29udHJhcnksIG9ibGlxdWUpLiBUcnkgdG8gdXNlIGFsbCB0eXBlcyBvZiBtb3Rpb24gKGV4Y2VwdCwgcGVyaGFwcywgb2JsaXF1ZSBtb3Rpb24pLCBidXQgcHJlZmVyIGNvbnRyYXJ5IG1vdGlvbiB3aGVyZSBwb3NzaWJsZS4gSXQgaXMgYmVzdCBmb3IgcHJlc2VydmluZyB0aGUgaW5kZXBlbmRlbmNlIG9mIHRoZSBsaW5lcywgaW4gYWRkaXRpb24gdG8gdmFyaWV0eS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCZWNhdXNlIHNpbWlsYXIgYW5kIHBhcmFsbGVsIG1vdGlvbiBkaW1pbmlzaCB2YXJpZXR5IGFuZCBtZWxvZGljIGluZGVwZW5kZW5jZSwgdGhlaXIgdXNlIHNob3VsZCBiZSBtZWRpYXRlZCBieSBvdGhlciBmYWN0b3JzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRvIG5vdCB1c2UgbW9yZSB0aGFuIHRocmVlIG9mIHRoZSBzYW1lIGltcGVyZmVjdCBjb25zb25hbmNlIHR5cGUgaW4gYSByb3cgKGUuZy4sIHRocmVlIHRoaXJkcyBpbiBhIHJvdykuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIk5ldmVyIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBtb3ZlIGludG8gYSBwZXJmZWN0IGNvbnNvbmFuY2UgYnkgc2ltaWxhciBtb3Rpb24gKHRoaXMgaXMgY2FsbGVkICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkaXJlY3QiKV0pLAogICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJoaWRkZW4gb2N0YXZlcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIpLiBUaGlzIGRyYXdzIHRvbyBtdWNoIGF0dGVudGlvbiB0byBhbiBpbnRlcnZhbCB3aGljaCBhbHJlYWR5IHN0YW5kcyBvdXQgb2YgdGhlIHRleHR1cmUuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkF2b2lkIGNvbWJpbmluZyBzaW1pbGFyIG1vdGlvbiB3aXRoIGxlYXBzLCBlc3BlY2lhbGx5IGxhcmdlIG9uZXMuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRlbW9uc3RyYXRpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2RlbW9uc3RyYXRpb24iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIERlbW9uc3RyYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiB0aGUgZm9sbG93aW5nIHZpZGVvLCBJIGlsbHVzdHJhdGUgdGhlIHByb2Nlc3Mgb2YgY29tcG9zaW5nIGEgZmlyc3Qtc3BlY2llcyBjb3VudGVycG9pbnQuIFRoaXMgdmlkZW8gcHJvdmlkZXMgbmV3IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb21wb3NpdGlvbmFsIHByb2Nlc3MsIGFzIHdlbGwgYXMgY29uY3JldGUgZXhhbXBsZXMgb2YgdGhlIGFib3ZlIHJ1bGVzIGFuZCBwcmluY2lwbGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiAiaHR0cDovL3BsYXllci52aW1lby5jb20vdmlkZW8vNTY4MjgzMDkiLAogICAgICAgICAgd2lkdGg6ICI1MDAiLAogICAgICAgICAgaGVpZ2h0OiAiMjgxIiwKICAgICAgICAgIGZyYW1lYm9yZGVyOiAiMCIsCiAgICAgICAgICB3ZWJraXRBbGxvd0Z1bGxTY3JlZW46ICIiLAogICAgICAgICAgbW96YWxsb3dmdWxsc2NyZWVuOiAiIiwKICAgICAgICAgIGFsbG93RnVsbFNjcmVlbjogIiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwcmFjdGljZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJhY3RpY2UiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByYWN0aWNlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQmVmb3JlIGNvbXBvc2luZyBhIGZpcnN0LXNwZWNpZXMgZXhlcmNpc2UgZnJvbSBzY3JhdGNoLCB0cnkgdGhlIGZvbGxvd2luZyBwcmFjdGljZSBleGVyY2lzZXMuIEVhY2ggaGFzIG9uZSBvciB0d28gZXJyb3JzLiBUcnkgdG8gZmluZCB0aGUgZXJyb3IocyksIGFuZCByZWNvbXBvc2UgdGhlIGV4ZXJjaXNlIHRvIGNyZWF0ZSBhIHdlbGwgZm9ybWVkIGV4ZXJjaXNlLiAoTm90ZTogdGhlIGFsdG8tY2xlZiBwYXJ0IGlzIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJjYW50dXMgZmlybXVzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBPbmx5IGNoYW5nZSB0aGUgY291bnRlcnBvaW50IGxpbmUuKSBCZSBzdXJlIHRvIGxpc3RlbiB0byBhbmQgcGVyZm9ybSB0aGUgZXhlcmNpc2VzLCBib3RoIGFzIHRoZXkgYXJlIHdyaXR0ZW4sIGFuZCBhcyB5b3UgbWFrZSBjaGFuZ2VzLiBZb3VyIGVhciBtYXkgYWxyZWFkeSBiZSBhYmxlIHRvIGRpcmVjdCB5b3UgdG8gZXJyb3JzLiBJZiBub3QsIHVzZSB0aGUgcHJpbmNpcGxlcyBvdXRsaW5lZCBhYm92ZSBvbmUtYnktb25lIHRvIHNlYXJjaCBmb3IgZXJyb3JzLiBPbmNlIHlvdSBpZGVudGlmeSBhbiBlcnJvciwgYmUgc3VyZSB0byBsaXN0ZW4gc2V2ZXJhbCB0aW1lcywgc2luZ2luZyBhbG9uZyB3aXRoIG9uZSBsaW5lIG9yIHRoZSBvdGhlciwgdG8gdHJhaW4geW91ciBlYXIgdG8gcmVjb2duaXplIHRoZSBwcm9ibGVtLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1pbm9yLWtleS1wcmFjdGljZS1jb3VudGVycG9pbnQtYWJvdmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI21pbm9yLWtleS1wcmFjdGljZS1jb3VudGVycG9pbnQtYWJvdmUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBNaW5vciBrZXkgcHJhY3RpY2UsIGNvdW50ZXJwb2ludCBhYm92ZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBzdGF0aWNDbGFzczogInRyaW5rZXQiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6ICJodHRwczovL3RyaW5rZXQuaW8vZW1iZWQvbXVzaWMvYTA4OWU5ODdjYSIsCiAgICAgICAgICB3aWR0aDogIjEwMCUiLAogICAgICAgICAgaGVpZ2h0OiAiMzAwIiwKICAgICAgICAgIGZyYW1lYm9yZGVyOiAiMCIsCiAgICAgICAgICBtYXJnaW53aWR0aDogIjAiLAogICAgICAgICAgbWFyZ2luaGVpZ2h0OiAiMCIsCiAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46ICIiCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWFqb3Ita2V5LXByYWN0aWNlLWNvdW50ZXJwb2ludC1iZWxvdyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbWFqb3Ita2V5LXByYWN0aWNlLWNvdW50ZXJwb2ludC1iZWxvdyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE1ham9yIGtleSBwcmFjdGljZSwgY291bnRlcnBvaW50IGJlbG93IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAidHJpbmtldCIsCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogImh0dHBzOi8vdHJpbmtldC5pby9lbWJlZC9tdXNpYy81ODU4MTBmNzYyIiwKICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICBoZWlnaHQ6ICIzMDAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIG1hcmdpbndpZHRoOiAiMCIsCiAgICAgICAgICBtYXJnaW5oZWlnaHQ6ICIwIiwKICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfYygiYnIiKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}