{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\hybridThemes.md?vue&type=template&id=466cbe7e&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\hybridThemes.md","mtime":1588287648248},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkh5YnJpZCB0aGVtZXMgbWl4ZXMgdGhlICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lRnVuY3Rpb25zLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImZ1bmN0aW9uYWwgZmVhdHVyZXMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBvZiAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9zZW50ZW5jZS5odG1sIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJzZW50ZW5jZXMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvcGVyaW9kLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoInBlcmlvZHMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIi4gV2lsbGlhbSBDYXBsaW4gaGFzIGlkZW50aWZpZWQgZm91ciBwcmltYXJ5IHR5cGVzOiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaHlicmlkLTEiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2h5YnJpZC0xIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIeWJyaWQgMSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiSHlicmlkIDEgY29tYmluZXMgYW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lRnVuY3Rpb25zLmh0bWwjYW50ZWNlZGVudCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJhbnRlY2VkZW50IHBocmFzZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHdpdGggYSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvdGhlbWVGdW5jdGlvbnMuaHRtbCNjb250aW51YXRpb24iIH0gfSwKICAgICAgICAgICAgW192bS5fdigiY29udGludWF0aW9uIHBocmFzZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6ICJHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMS5zdmciLAogICAgICAgICAgb25lcnJvcjogInRoaXMuc3JjPSdHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMS5wbmcnIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIi9HcmFwaGljcy9mb3JtL2szMzAtaWkucG5nIiB9IH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQW50ZWNlZGVudCArIENvbnRpbnVhdGlvbjogTW96YXJ0LCBQaWFubyBTb25hdGEgaW4gQyBtYWpvciwgSy4gMzMwIElJLCBtbS4gMeKAkzgiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL2VtYmVkLnNwb3RpZnkuY29tLz91cmk9c3BvdGlmeSUzQXRyYWNrJTNBMmw3NG1ta0RoVzVEeE43TE5ua2VTZCIsCiAgICAgICAgICB3aWR0aDogIjMwMCIsCiAgICAgICAgICBoZWlnaHQ6ICI4MCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3d0cmFuc3BhcmVuY3k6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBwcm90b3R5cGljYWwgZXhhbXBsZSBpcyBmb3VuZCBpbiB0aGUgZmlyc3QgZWlnaHQgbWVhc3VyZXMgb2YgTW96YXJ0J3MgUGlhbm8gU29uYXRhIGluIEMgbWFqb3IsIElJLiBUaGUgYW50ZWNlZGVudCBwaHJhc2UgY29udGFpbnMgYSBiYXNpYyBpZGVhIGNoYXJhY3Rlcml6ZWQgYnkgdGhlIHJlcGVhdGVkIG5vdGVzIGZvcm1pbmcgaXRzIGFuYWNydXNpcy4gVGhpcyBpcyBmb2xsb3dlZCBieSBhIGNvbnRyYXN0aW5nIGlkZWEgZm9ybWVkIGZyb20gYSBzY2FsYXIgYXNjZW50IGxlYWRpbmcgdG8gdGhlIHBocmFzZSdzIGhhbGYgY2FkZW5jZSBpbiBtLiA0LiBGb2xsb3dpbmcgdGhlIGFudGVjZWRlbnQgcGhyYXNlLCB0aGUgbXVzaWMgYmVnaW5zIHRvIGV4cHJlc3MgY29udGludWF0aW9uIGZ1bmN0aW9uLCBwcmltYXJpbHkgdGhyb3VnaCBmcmFnbWVudGF0aW9uIGFuZCBhbiBpbmNyZWFzZSBpbiBzdXJmYWNlIHJoeXRobS4gSW4gdGhlIG1pZGRsZSBvZiBtLiA2LCB0aGUgY2hhcmFjdGVyaXN0aWMgbWVsb2RpYyBtb3RpdmVzIGFyZSBsaXF1aWRhdGVkIGludG8gY29udmVudGlvbmFsIHNjYWxhciBmaWd1cmF0aW9uIGxlYWRpbmcgdG8gYSBWOlBBQy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJoeWJyaWQtMiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaHlicmlkLTIiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEh5YnJpZCAyIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSHlicmlkIDIgY29tYmluZXMgYW4gYW50ZWNlZGVudCBwaHJhc2Ugd2l0aCBhIGZvdXItbWVhc3VyZSBjYWRlbnRpYWwgcHJvZ3Jlc3Npb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6ICJHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMi5zdmciLAogICAgICAgICAgb25lcnJvcjogInRoaXMuc3JjPSdHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMi5wbmcnIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIi9HcmFwaGljcy9mb3JtL2hheWRuLUlJSS02Ni1paS5wbmciIH0gfSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBbnRlY2VkZW50ICsgQ2FkZW50aWFsOiBIYXlkbiwgU3RyaW5nIFF1YXJ0ZXQgaW4gRyBtYWpvciwgSG9iLiBJSUk6NjYsIElJLCBtbS4gMeKAkzgiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL2VtYmVkLnNwb3RpZnkuY29tLz91cmk9c3BvdGlmeSUzQXRyYWNrJTNBMkR5aDhMTVhIRXY0SHhjaGVweXViaiIsCiAgICAgICAgICB3aWR0aDogIjMwMCIsCiAgICAgICAgICBoZWlnaHQ6ICI4MCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3d0cmFuc3BhcmVuY3k6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGVyZSwgdGhlIGZvdXIgbWVhc3VyZXMgc3Vic2VxdWVudCB0byB0aGUgYW50ZWNlZGVudCBzdXBwb3J0IGEgc2luZ2xlIGNhZGVudGlhbCBwcm9ncmVzc2lvbjoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgW19jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJJNiBpaTYvNSBWIEkiKV0pXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJOb3RpY2UgdGhhdCB0aGlzIGZvdXItbWVhc3VyZSBwaHJhc2UgZG9lcyBub3QgZGlzcGxheSBhbnkgbWFya2VycyBvZiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi90aGVtZUZ1bmN0aW9ucy5odG1sI2NvbnRpbnVhdGlvbiIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJjb250aW51YXRpb24gZnVuY3Rpb24iKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCIjI1RoZSBDb21wb3VuZCBCYXNpYyBJZGVhIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdKdXN0IGFzIHdlIHNvbWV0aW1lcyBmaW5kIGNvbXBvc2VycyBjb21iaW5pbmcgZGlmZmVyZW50IGZlYXR1cmVzIG9mIHRoZSB0d28gcHJpbWFyeSB0aGVtYXRpYyB0eXBlcywgd2UgYWxzbyBvZnRlbiBmaW5kIGNvbWJpbmF0aW9ucyBvZiBkaWZmZXJlbnQgdHlwZXMgb2YgcGhyYXNlLiBUaGUgImNvbXBvdW5kIGJhc2ljIGlkZWEsIiBvciBDQkksIGNvbWJpbmVzIHRoZSBtZWxvZGljIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgJwogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvdGhlbWVGdW5jdGlvbnMuaHRtbCNhbnRlY2VkZW50IiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoImFudGVjZWRlbnQgZnVuY3Rpb24iKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiB3aXRoIHRoZSBoYXJtb25pYyBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi90aGVtZUZ1bmN0aW9ucy5odG1sI3ByZXNlbnRhdGlvbiIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJwcmVzZW50YXRpb24iKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZnVuY3Rpb24uIExpa2UgYW4gYW50ZWNlZGVudCwgaXQgcHJlc2VudHMgYSBiYXNpYyBpZGVhIGZvbGxvd2VkIGJ5IGEgY29udHJhc3Rpbmcgb25lLiBCdXQgbGlrZSBhIHByZXNlbnRhdGlvbiwgdGhlIGNvbXBvdW5kIGJhc2ljIGlkZWEgc2ltcGx5IHByb2xvbmdzIHRvbmljLCB3aXRob3V0IGVuZGluZyBpbiBhIGNhZGVuY2UuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImh5YnJpZC0zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNoeWJyaWQtMyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSHlicmlkIDMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlRoZSB0aGlyZCBoeWJyaWQgdHlwZSBzdHJvbmdseSByZXNlbWJsZXMgdGhlICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL2h5YnJpZFRoZW1lcy5odG1sI2h5YnJpZC0xIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJmaXJzdCBoeWJyaWQiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIFJhdGhlciB0aGFuIGJlZ2lubmluZyB3aXRoIGFuIGluaXRpYXRpbmcgYW50ZWNlZGVudCwgaG93ZXZlciwgaXRzIGZpcnN0IHBocmFzZSBpcyBhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2h5YnJpZFRoZW1lcy5odG1sI3RoZS1jb21wb3VuZC1iYXNpYy1pZGVhIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkNCSSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gRm9sbG93aW5nIHRoZSBDQkksIEh5YnJpZCAzIGNvbmNsdWRlcyB3aXRoIGEgY29udGludWF0aW9uIHRoYXQgZW5kcyB3aXRoIGEgY2FkZW5jZS4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6ICJHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMy5zdmciLAogICAgICAgICAgb25lcnJvcjogInRoaXMuc3JjPSdHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMy5wbmcnIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIi9HcmFwaGljcy9mb3JtL2JlZXRob3Zlbl9vcDMwLnBuZyIgfSB9KSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiZmlnY2FwdGlvbiIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbXBvdW5kIEJhc2ljIElkZWEgKyBDb250aW51YXRpb246IEJlZXRob3ZlbiwgVmlvbGluIFNvbmF0YSwgT3AuIDMwLCBOby4gMiwgSUlJLCBtbS4gMeKAkzgiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL2VtYmVkLnNwb3RpZnkuY29tLz91cmk9c3BvdGlmeSUzQXRyYWNrJTNBMk1lRkYwaXlqTXRzMWp1UndnRFhBVCIsCiAgICAgICAgICB3aWR0aDogIjMwMCIsCiAgICAgICAgICBoZWlnaHQ6ICI4MCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3d0cmFuc3BhcmVuY3k6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSW4gdGhpcyBleGFtcGxlLCBmcm9tIEJlZXRob3ZlbidzIFZpb2xpbiBTb25hdGEsIE9wLiAzMCwgdGhlIG1lbG9kaWMgc3RydWN0dXJlIG9mIHRoZSBpbml0aWF0aW5nIHBocmFzZSBjb250YWlucyB0d28gY29udHJhc3RpbmcgaWRlYXMsIGVhY2ggb2Ygd2hpY2ggYmVnaW5zIHdpdGggdGhlIHNhbWUgZG90dGVkIGZpZ3VyZS4gSG93ZXZlciwgdW5saWtlIGEgdHlwaWNhbCBhbnRlY2VkZW50LCB0aGUgcGhyYXNlIG9ubHkgcHJvbG9uZ3MgdG9uaWMgYXMgdGhlIFY2IG9uIHRoZSBsYXN0IGJlYXQgb2YgbS4gMyBvbmx5IGRlY29yYXRlcyB0aGUgdG9uaWMgdGhyb3VnaCBhIGxvd2VyIG5laWdoYm9yIG1vdGlvbiByYXRoZXIgdGhhbiBjcmVhdGluZyBjYWRlbnRpYWwgYXJ0aWN1bGF0aW9uLiBUaHVzLCB0aGUgcGhyYXNlIGlzIGJlc3QgdW5kZXJzdG9vZCBhcyBhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2h5YnJpZFRoZW1lcy5odG1sI3RoZS1jb21wb3VuZC1iYXNpYy1pZGVhIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoJyJjb21wb3VuZCBiYXNpYyBpZGVhLiInKV0KICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgY29uY2x1ZGluZyBwaHJhc2UgaXMgYSB0eXBpY2FsIGNvbnRpbnVhdGlvbiBleHByZXNzZWQgdGhyb3VnaCBmcmFnbWVudGF0aW9uLCBtZWxvZGljIHNlcXVlbmNlLCBhbmQgaW5jcmVhc2VkIGhhcm1vbmljIHJoeXRobS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJoeWJyaWQtNCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjaHlicmlkLTQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEh5YnJpZCA0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnSHlicmlkIDQgcmVzZW1ibGVzIHRoZSBwZXJpb2QsIHdpdGggdGhlIGV4Y2VwdGlvbiB0aGF0IHRoZSBmaXJzdCBwaHJhc2UgaXMgY29tcHJpc2VkIG9mIGEgImNvbXBvdW5kIGJhc2ljIGlkZWEiIHJhdGhlciB0aGFuIGFuIGFudGVjZWRlbnQuIEZvbGxvd2luZyB0aGUgJwogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvaHlicmlkVGhlbWVzLmh0bWwjdGhlLWNvbXBvdW5kLWJhc2ljLWlkZWEiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiQ0JJIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLCB0aGUgY29uY2x1ZGluZyBwaHJhc2UgZXhwcmVzc2VzIHRoZSBmdW5jdGlvbiBvZiBhIGNvbnNlcXVlbnQsIHR5cGljYWxseSBhbHRlcmluZyB0aGUgcmV0dXJuIG9mIHRoZSBjb250cmFzdGluZyBpZGVhIHNvIHRoYXQgdGhlIHRoZW1lIGVuZHMgd2l0aCBhIHN0cm9uZyBjYWRlbmNlLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogIkdyYXBoaWNzL0NsYXNzaWNhbFRoZW1lcy9oeWJyaWQ0LnN2ZyIsCiAgICAgICAgICBvbmVycm9yOiAidGhpcy5zcmM9J0dyYXBoaWNzL0NsYXNzaWNhbFRoZW1lcy9oeWJyaWQ0LnBuZyciCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiL0dyYXBoaWNzL2Zvcm0vYmVldGhvdmVuXzE4XzIucG5nIiB9IH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29tcG91bmQgQmFzaWMgSWRlYSArIENvbnNlcXVlbnQ6IEJlZXRob3ZlbiwgU3RyaW5nIFF1YXJ0ZXQgaW4gRyBtYWpvciwgT3AuIDE4LzIsIElWLiwgbW0uIDHigJM4IgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnklM0F0cmFjayUzQTVBZXZWbzNTUnVITEpJWnB6MFdUNk4iLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBjZWxsbydzIHByZXNlbnRhdGlvbiBvZiB0aGUgaW5pdGlhdGluZyBwaHJhc2UgY29udGFpbnMgdHdvIGRpc3RpbmN0IG1lbG9kaWMgaWRlYXMuIEJ1dCB0aGlzIHBocmFzZSdzIGNvbmNsdXNpb24sIG9uIHRoZSBDNCBpbiBtLiA0LCBpcyBub3Qgc3VmZmljaWVudCB0byBjcmVhdGUgY2FkZW50aWFsIGNsb3N1cmUuIFdoZW4gdGhlIHJlbWFpbmluZyBzdHJpbmdzIGVudGVyIGluIG0uIDUsIHRoZXkgd29yayB0aHJvdWdoIHRoZSBzYW1lIGJhc2ljIGFuZCBjb250cmFzdGluZyBpZGVhcywgYnV0IGFyZSBhYmxlIHRvIGNyZWF0ZSBhIEk6UEFDIHRvIGNsb3NlIHRoZSBjb25zZXF1ZW50IHBocmFzZS4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}