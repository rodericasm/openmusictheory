{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\hybridThemes.md?vue&type=template&id=466cbe7e&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\hybridThemes.md","mtime":1588345391531},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkh5YnJpZCB0aGVtZXMgbWl4ZXMgdGhlICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lRnVuY3Rpb25zLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImZ1bmN0aW9uYWwgZmVhdHVyZXMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBvZiAiKSwKICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9zZW50ZW5jZS5odG1sIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJzZW50ZW5jZXMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvcGVyaW9kLmh0bWwiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoInBlcmlvZHMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIi4gV2lsbGlhbSBDYXBsaW4gaGFzIGlkZW50aWZpZWQgZm91ciBwcmltYXJ5IHR5cGVzOiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaHlicmlkLTEiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2h5YnJpZC0xIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIeWJyaWQgMSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiSHlicmlkIDEgY29tYmluZXMgYW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lRnVuY3Rpb25zLmh0bWwjYW50ZWNlZGVudCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJhbnRlY2VkZW50IHBocmFzZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHdpdGggYSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvdGhlbWVGdW5jdGlvbnMuaHRtbCNjb250aW51YXRpb24iIH0gfSwKICAgICAgICAgICAgW192bS5fdigiY29udGludWF0aW9uIHBocmFzZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6ICJHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkMS5zdmciIH0gfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL2Zvcm0vazMzMC1paS5wbmciIH0gfSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJBbnRlY2VkZW50ICsgQ29udGludWF0aW9uOiBNb3phcnQsIFBpYW5vIFNvbmF0YSBpbiBDIG1ham9yLCBLLiAzMzAgSUksIG1tLiAx4oCTOCIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzoKICAgICAgICAgICAgImh0dHBzOi8vZW1iZWQuc3BvdGlmeS5jb20vP3VyaT1zcG90aWZ5JTNBdHJhY2slM0EybDc0bW1rRGhXNUR4TjdMTm5rZVNkIiwKICAgICAgICAgIHdpZHRoOiAiMzAwIiwKICAgICAgICAgIGhlaWdodDogIjgwIiwKICAgICAgICAgIGZyYW1lYm9yZGVyOiAiMCIsCiAgICAgICAgICBhbGxvd3RyYW5zcGFyZW5jeTogInRydWUiCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBIHByb3RvdHlwaWNhbCBleGFtcGxlIGlzIGZvdW5kIGluIHRoZSBmaXJzdCBlaWdodCBtZWFzdXJlcyBvZiBNb3phcnQncyBQaWFubyBTb25hdGEgaW4gQyBtYWpvciwgSUkuIFRoZSBhbnRlY2VkZW50IHBocmFzZSBjb250YWlucyBhIGJhc2ljIGlkZWEgY2hhcmFjdGVyaXplZCBieSB0aGUgcmVwZWF0ZWQgbm90ZXMgZm9ybWluZyBpdHMgYW5hY3J1c2lzLiBUaGlzIGlzIGZvbGxvd2VkIGJ5IGEgY29udHJhc3RpbmcgaWRlYSBmb3JtZWQgZnJvbSBhIHNjYWxhciBhc2NlbnQgbGVhZGluZyB0byB0aGUgcGhyYXNlJ3MgaGFsZiBjYWRlbmNlIGluIG0uIDQuIEZvbGxvd2luZyB0aGUgYW50ZWNlZGVudCBwaHJhc2UsIHRoZSBtdXNpYyBiZWdpbnMgdG8gZXhwcmVzcyBjb250aW51YXRpb24gZnVuY3Rpb24sIHByaW1hcmlseSB0aHJvdWdoIGZyYWdtZW50YXRpb24gYW5kIGFuIGluY3JlYXNlIGluIHN1cmZhY2Ugcmh5dGhtLiBJbiB0aGUgbWlkZGxlIG9mIG0uIDYsIHRoZSBjaGFyYWN0ZXJpc3RpYyBtZWxvZGljIG1vdGl2ZXMgYXJlIGxpcXVpZGF0ZWQgaW50byBjb252ZW50aW9uYWwgc2NhbGFyIGZpZ3VyYXRpb24gbGVhZGluZyB0byBhIFY6UEFDLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImh5YnJpZC0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNoeWJyaWQtMiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSHlicmlkIDIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIeWJyaWQgMiBjb21iaW5lcyBhbiBhbnRlY2VkZW50IHBocmFzZSB3aXRoIGEgZm91ci1tZWFzdXJlIGNhZGVudGlhbCBwcm9ncmVzc2lvbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL0NsYXNzaWNhbFRoZW1lcy9oeWJyaWQyLnN2ZyIgfSB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiR3JhcGhpY3MvZm9ybS9oYXlkbi1JSUktNjYtaWkucG5nIiB9IH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQW50ZWNlZGVudCArIENhZGVudGlhbDogSGF5ZG4sIFN0cmluZyBRdWFydGV0IGluIEcgbWFqb3IsIEhvYi4gSUlJOjY2LCBJSSwgbW0uIDHigJM4IgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnklM0F0cmFjayUzQTJEeWg4TE1YSEV2NEh4Y2hlcHl1YmoiLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhlcmUsIHRoZSBmb3VyIG1lYXN1cmVzIHN1YnNlcXVlbnQgdG8gdGhlIGFudGVjZWRlbnQgc3VwcG9ydCBhIHNpbmdsZSBjYWRlbnRpYWwgcHJvZ3Jlc3Npb246IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFtfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiSTYgaWk2LzUgViBJIildKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTm90aWNlIHRoYXQgdGhpcyBmb3VyLW1lYXN1cmUgcGhyYXNlIGRvZXMgbm90IGRpc3BsYXkgYW55IG1hcmtlcnMgb2YgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvdGhlbWVGdW5jdGlvbnMuaHRtbCNjb250aW51YXRpb24iIH0gfSwKICAgICAgICAgICAgW192bS5fdigiY29udGludWF0aW9uIGZ1bmN0aW9uIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0aGUtY29tcG91bmQtYmFzaWMtaWRlYSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdGhlLWNvbXBvdW5kLWJhc2ljLWlkZWEiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUaGUgQ29tcG91bmQgQmFzaWMgSWRlYSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ0p1c3QgYXMgd2Ugc29tZXRpbWVzIGZpbmQgY29tcG9zZXJzIGNvbWJpbmluZyBkaWZmZXJlbnQgZmVhdHVyZXMgb2YgdGhlIHR3byBwcmltYXJ5IHRoZW1hdGljIHR5cGVzLCB3ZSBhbHNvIG9mdGVuIGZpbmQgY29tYmluYXRpb25zIG9mIGRpZmZlcmVudCB0eXBlcyBvZiBwaHJhc2UuIFRoZSAiY29tcG91bmQgYmFzaWMgaWRlYSwiIG9yIENCSSwgY29tYmluZXMgdGhlIG1lbG9kaWMgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSAnCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi90aGVtZUZ1bmN0aW9ucy5odG1sI2FudGVjZWRlbnQiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiYW50ZWNlZGVudCBmdW5jdGlvbiIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIHdpdGggdGhlIGhhcm1vbmljIGNoYXJhY3RlcmlzdGljcyBvZiB0aGUgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3RoZW1lRnVuY3Rpb25zLmh0bWwjcHJlc2VudGF0aW9uIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoInByZXNlbnRhdGlvbiIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBmdW5jdGlvbi4gTGlrZSBhbiBhbnRlY2VkZW50LCBpdCBwcmVzZW50cyBhIGJhc2ljIGlkZWEgZm9sbG93ZWQgYnkgYSBjb250cmFzdGluZyBvbmUuIEJ1dCBsaWtlIGEgcHJlc2VudGF0aW9uLCB0aGUgY29tcG91bmQgYmFzaWMgaWRlYSBzaW1wbHkgcHJvbG9uZ3MgdG9uaWMsIHdpdGhvdXQgZW5kaW5nIGluIGEgY2FkZW5jZS4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaHlicmlkLTMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2h5YnJpZC0zIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIeWJyaWQgMyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiVGhlIHRoaXJkIGh5YnJpZCB0eXBlIHN0cm9uZ2x5IHJlc2VtYmxlcyB0aGUgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvaHlicmlkVGhlbWVzLmh0bWwjaHlicmlkLTEiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoImZpcnN0IGh5YnJpZCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gUmF0aGVyIHRoYW4gYmVnaW5uaW5nIHdpdGggYW4gaW5pdGlhdGluZyBhbnRlY2VkZW50LCBob3dldmVyLCBpdHMgZmlyc3QgcGhyYXNlIGlzIGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvaHlicmlkVGhlbWVzLmh0bWwjdGhlLWNvbXBvdW5kLWJhc2ljLWlkZWEiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiQ0JJIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLiBGb2xsb3dpbmcgdGhlIENCSSwgSHlicmlkIDMgY29uY2x1ZGVzIHdpdGggYSBjb250aW51YXRpb24gdGhhdCBlbmRzIHdpdGggYSBjYWRlbmNlLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL0NsYXNzaWNhbFRoZW1lcy9oeWJyaWQzLnN2ZyIgfSB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiR3JhcGhpY3MvZm9ybS9iZWV0aG92ZW5fb3AzMC5wbmciIH0gfSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDb21wb3VuZCBCYXNpYyBJZGVhICsgQ29udGludWF0aW9uOiBCZWV0aG92ZW4sIFZpb2xpbiBTb25hdGEsIE9wLiAzMCwgTm8uIDIsIElJSSwgbW0uIDHigJM4IgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnklM0F0cmFjayUzQTJNZUZGMGl5ak10czFqdVJ3Z0RYQVQiLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkluIHRoaXMgZXhhbXBsZSwgZnJvbSBCZWV0aG92ZW4ncyBWaW9saW4gU29uYXRhLCBPcC4gMzAsIHRoZSBtZWxvZGljIHN0cnVjdHVyZSBvZiB0aGUgaW5pdGlhdGluZyBwaHJhc2UgY29udGFpbnMgdHdvIGNvbnRyYXN0aW5nIGlkZWFzLCBlYWNoIG9mIHdoaWNoIGJlZ2lucyB3aXRoIHRoZSBzYW1lIGRvdHRlZCBmaWd1cmUuIEhvd2V2ZXIsIHVubGlrZSBhIHR5cGljYWwgYW50ZWNlZGVudCwgdGhlIHBocmFzZSBvbmx5IHByb2xvbmdzIHRvbmljIGFzIHRoZSBWNiBvbiB0aGUgbGFzdCBiZWF0IG9mIG0uIDMgb25seSBkZWNvcmF0ZXMgdGhlIHRvbmljIHRocm91Z2ggYSBsb3dlciBuZWlnaGJvciBtb3Rpb24gcmF0aGVyIHRoYW4gY3JlYXRpbmcgY2FkZW50aWFsIGFydGljdWxhdGlvbi4gVGh1cywgdGhlIHBocmFzZSBpcyBiZXN0IHVuZGVyc3Rvb2QgYXMgYSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9oeWJyaWRUaGVtZXMuaHRtbCN0aGUtY29tcG91bmQtYmFzaWMtaWRlYSIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCciY29tcG91bmQgYmFzaWMgaWRlYS4iJyldCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIGNvbmNsdWRpbmcgcGhyYXNlIGlzIGEgdHlwaWNhbCBjb250aW51YXRpb24gZXhwcmVzc2VkIHRocm91Z2ggZnJhZ21lbnRhdGlvbiwgbWVsb2RpYyBzZXF1ZW5jZSwgYW5kIGluY3JlYXNlZCBoYXJtb25pYyByaHl0aG0uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaHlicmlkLTQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2h5YnJpZC00IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIeWJyaWQgNCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ0h5YnJpZCA0IHJlc2VtYmxlcyB0aGUgcGVyaW9kLCB3aXRoIHRoZSBleGNlcHRpb24gdGhhdCB0aGUgZmlyc3QgcGhyYXNlIGlzIGNvbXByaXNlZCBvZiBhICJjb21wb3VuZCBiYXNpYyBpZGVhIiByYXRoZXIgdGhhbiBhbiBhbnRlY2VkZW50LiBGb2xsb3dpbmcgdGhlICcKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2h5YnJpZFRoZW1lcy5odG1sI3RoZS1jb21wb3VuZC1iYXNpYy1pZGVhIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkNCSSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgdGhlIGNvbmNsdWRpbmcgcGhyYXNlIGV4cHJlc3NlcyB0aGUgZnVuY3Rpb24gb2YgYSBjb25zZXF1ZW50LCB0eXBpY2FsbHkgYWx0ZXJpbmcgdGhlIHJldHVybiBvZiB0aGUgY29udHJhc3RpbmcgaWRlYSBzbyB0aGF0IHRoZSB0aGVtZSBlbmRzIHdpdGggYSBzdHJvbmcgY2FkZW5jZS4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6ICJHcmFwaGljcy9DbGFzc2ljYWxUaGVtZXMvaHlicmlkNC5zdmciIH0gfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL2Zvcm0vYmVldGhvdmVuXzE4XzIucG5nIiB9IH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ29tcG91bmQgQmFzaWMgSWRlYSArIENvbnNlcXVlbnQ6IEJlZXRob3ZlbiwgU3RyaW5nIFF1YXJ0ZXQgaW4gRyBtYWpvciwgT3AuIDE4LzIsIElWLiwgbW0uIDHigJM4IgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnklM0F0cmFjayUzQTVBZXZWbzNTUnVITEpJWnB6MFdUNk4iLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBjZWxsbydzIHByZXNlbnRhdGlvbiBvZiB0aGUgaW5pdGlhdGluZyBwaHJhc2UgY29udGFpbnMgdHdvIGRpc3RpbmN0IG1lbG9kaWMgaWRlYXMuIEJ1dCB0aGlzIHBocmFzZSdzIGNvbmNsdXNpb24sIG9uIHRoZSBDNCBpbiBtLiA0LCBpcyBub3Qgc3VmZmljaWVudCB0byBjcmVhdGUgY2FkZW50aWFsIGNsb3N1cmUuIFdoZW4gdGhlIHJlbWFpbmluZyBzdHJpbmdzIGVudGVyIGluIG0uIDUsIHRoZXkgd29yayB0aHJvdWdoIHRoZSBzYW1lIGJhc2ljIGFuZCBjb250cmFzdGluZyBpZGVhcywgYnV0IGFyZSBhYmxlIHRvIGNyZWF0ZSBhIEk6UEFDIHRvIGNsb3NlIHRoZSBjb25zZXF1ZW50IHBocmFzZS4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}