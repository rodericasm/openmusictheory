{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\trinket.md?vue&type=template&id=d810ada8&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\trinket.md","mtime":1588287648250},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJ0cmlua2V0IiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiAiaHR0cHM6Ly90cmlua2V0LmlvL2VtYmVkL211c2ljL2EwODllOTg3Y2EiLAogICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgIGhlaWdodDogIjMwMCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgbWFyZ2lud2lkdGg6ICIwIiwKICAgICAgICAgIG1hcmdpbmhlaWdodDogIjAiLAogICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoCiAgICAgICAgIlxuKkVycm9yLWRldGVjdGlvbiBleGVyY2lzZSBmcm9tIFtDb21wb3NpbmcgYSBmaXJzdC1zcGVjaWVzIGNvdW50ZXJwb2ludF0oaHR0cDovL29wZW5tdXNpY3RoZW9yeS5jb20vZmlyc3RTcGVjaWVzLmh0bWwpLipcbiIKICAgICAgKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly90cmlua2V0LmlvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJUcmlua2V0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGEgbmV3IHRvb2wgZm9yIGludGVyYWN0aXZlIG11c2ljIG5vdGF0aW9uIG9uIHRoZSB3ZWIuIEl0IGNhbiBiZSBhZGRlZCB0byBhbnkgd2Vic2l0ZSB0aGF0IHN1cHBvcnRzIGlGcmFtZXMsIGFuZCB0aGVyZSBhcmUgc2V2ZXJhbCBtdXNpYyB0cmlua2V0cyBlbWJlZGRlZCBpbiBPcGVuIE11c2ljIFRoZW9yeSAod2l0aCBtb3JlIG9uIHRoZSB3YXkgYXMgdGhlIHRleHRib29rIGdyb3dzKS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJub3RhdGlvbi1ndWlkZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbm90YXRpb24tZ3VpZGUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE5vdGF0aW9uIGd1aWRlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTXVzaWMgbm90YXRpb24gaXMgY3JlYXRlZCBieSBlbnRlcmluZyB0ZXh0IGludG8gYSBib3ggYXQgdGhlIGJvdHRvbSBvZiB0aGUgdHJpbmtldC4gVHJpbmtldHMgb2ZmZXIgYSBsaW1pdGVkIHNldCBvZiBtdXNpY2FsIGZlYXR1cmVzLCBpbiBvcmRlciB0byBrZWVwIHRoaW5ncyBzaW1wbGUuIFRoZSB0ZXh0IHJlcXVpcmVkIGZvciB0aGVzZSBmZWF0dXJlcyBpcyBwcm92aWRlZCBiZWxvdy4gTW9zdCBvZiB0aGVzZSBmZWF0dXJlcyBhcmUgaW5jbHVkZWQgaW4gdGhlIGV4YW1wbGUgdHJpbmtldCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwaXRjaCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGl0Y2giIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBQaXRjaCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1BpdGNoIGNsYXNzZXMgYXJlIGRlc2lnbmF0ZWQgYnkgdGhlaXIgbGV0dGVyIG5hbWVzIGZvbGxvd2VkIGJ5IC0gZm9yIGZsYXQsICMgZm9yIHNoYXJwLCBvciAibiIgZm9yIG5hdHVyYWwuIFJlc3RzIGFyZSBkZXNpZ25hdGVkIGJ5ICJyIi4nCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiBvcmRlciB0byBhdm9pZCBjb25mdXNpb24gd2l0aCByaHl0aG1pYyBudW1iZXJzLCB0cmlua2V0IHVzZXMgYSB2ZXJzaW9uIG9mIHRoZSBIZWxtaG9sdHogcmVnaXN0ZXIgZGVzaWduYXRpb24uIFNvIElTTyBPY3RhdmUgNCAobWlkZGxlIEMgdXAgdG8gdGhlIEIgYWJvdmUgaXQpIHVzZXMgbG93ZXIgY2FzZSBsZXR0ZXJzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgW19jKCJjb2RlIiwgW192bS5fdigiYyBkIGUgZiBnIGEgYlxuIildKV0pCiAgICAgIF0pLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KCJcbklTTyBPY3RhdmUgNSBhZGRzIHByaW1lczpcbiIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJjJyBkJyBlJyBmJyBnJyBhJyBiJ1xuIildKV0pCiAgICAgIF0pLAogICAgICBfYygiYnIiKSwKICAgICAgX3ZtLl92KAogICAgICAgICJcbklTTyBPY3RhdmUgNiB0YWtlcyB0d28gcHJpbWVzIChjJycpLCBPY3RhdmUgNyB0aHJlZSBwcmltZXMgKGMnJycpLCBldGMuXG4iCiAgICAgICksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiT2N0YXZlIDMgKGltbWVkaWF0ZWx5IGJlbG93IG1pZGRsZSBDKSB1c2VzIGNhcGl0YWwgbGV0dGVyczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIFtfYygiY29kZSIsIFtfdm0uX3YoIkMgRCBFIEYgRyBBIEJcbiIpXSldKQogICAgICBdKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigiXG5PY3RhdmUgMiB1c2VzIHR3byBjYXBpdGFsIGxldHRlcnM6XG4iKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgW19jKCJjb2RlIiwgW192bS5fdigiQ0MgREQgRUUgRkYgR0cgQUEgQkJcbiIpXSldKQogICAgICBdKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigiXG5BbmQgc28gb24uXG4iKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInJoeXRobSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmh5dGhtIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUmh5dGhtIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUmh5dGhtcyBhcmUgZGVzaWduYXRlZCBieSBudW1iZXJzIHJlcHJlc2VudGluZyBub3RlIHZhbHVlc+KAlDIgZm9yIGhhbGYgbm90ZSwgNCBmb3IgcXVhcnRlciBub3RlLCBldGMu4oCUYW5kIHBlcmlvZHMgZm9yIGRvdHRlZCBub3Rlc+KAlDIuIGZvciBkb3R0ZWQgaGFsZiBub3RlLCA0Li4gZm9yIGRvdWJseSBkb3R0ZWQgcXVhcnRlciBub3RlLCBldGMuIFRoZXNlIG51bWJlcnMgaW1tZWRpYXRlbHkgZm9sbG93IHRoZSBwaXRjaGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRpZXMgYXJlIGRlbm90ZWQgYnkgcGxhY2luZyBhIH4gaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHJoeXRobWljIHZhbHVlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNob3JkcyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY2hvcmRzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQ2hvcmRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gbWFrZSBhIGNob3JkLCBzaW1wbHkgcHV0IHR3byBvciBtb3JlIG5vdGVzIHdpdGhpbiBhbmdsZWQgYnJhY2tldHMgKGFuZCBwdXQgdGhlIHJoeXRobSBvdXRzaWRlIHRoZSBicmFja2V0KS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIFtfYygiY29kZSIsIFtfdm0uX3YoIjxjIGUgZz40LiA8ZCBmPjhcbiIpXSldKQogICAgICBdKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibHlyaWNzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNseXJpY3MiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBMeXJpY3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGVuIHVzaW5nIGx5cmljcywgc2ltcGxlIHR5cGUgbHlyaWNzIChvciBhbmFseXRpY2FsIG5vdGF0aW9uKSBpbnRvIHRoZSBseXJpYyBib3guIFVzZSBhIHNwYWNlIHRvIG1vdmUgb24gdG8gdGhlIG5leHQgbm90ZS4gV2hlbiBza2lwcGluZyBhIG5vdGUsIHB1dCBhIH4gZm9yIHRoZSBub3RlcyB0aGF0IGRvbid0IHRha2UgbHlyaWNzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImV4YW1wbGUiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2V4YW1wbGUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBFeGFtcGxlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGVyZSBpcyBhbiBleGFtcGxlIHRoYXQgdXNlcyBtYW55IG9mIHRoZSBmZWF0dXJlcyBsaXN0ZWQgYWJvdmUuIChJbnRlcm5hdGlvbmFsIHJlYWRlcnMsIHBsZWFzZSBmb3JnaXZlIHRoZSBtb3ZhYmxlLWRvISkiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogImh0dHBzOi8vdHJpbmtldC5pby9lbWJlZC9tdXNpYy85MWM2NzNkZjdjIiwKICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICBoZWlnaHQ6ICIyNjAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIG1hcmdpbndpZHRoOiAiMCIsCiAgICAgICAgICBtYXJnaW5oZWlnaHQ6ICIwIiwKICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfYygiYnIiKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}