{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\alteredSubdominants.md?vue&type=template&id=db2ebb0a&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\alteredSubdominants.md","mtime":1588287648247},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgbW9zdCBjb21tb24gY2hyb21hdGljYWxseSBhbHRlcmVkIHN1YmRvbWluYW50IGNob3JkcyAoYXNpZGUgZnJvbSB0aGUgYXBwbGllZCBkb21pbmFudCBvZiBWKSBhcmUgdGhlICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIk5lYXBvbGl0YW4gY2hvcmQiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCB0aGUgdmFyaW91cyAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJhdWdtZW50ZWQtc2l4dGggY2hvcmRzIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI3NSUiLCBkaXNwbGF5OiAiYmxvY2siLCBtYXJnaW46ICJhdXRvIiB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6ICJHcmFwaGljcy9OLUF1Z1NpeHRocy5wbmciLAogICAgICAgICAgYWx0OgogICAgICAgICAgICAiTmVhcG9saXRhbiBjaG9yZCBhbmQgYXVnbWVudGVkIHNpeHRoIGNob3JkcywgYXMgZGVzY3JpYmVkIGJlbG93LCBub3RhdGVkIG9uIGEgc3RhZmYgaW4gYmFzc28tY29udGludW8gc3R5bGUgaW4gRyBtaW5vciBvciBtYWpvci4iCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJuZWFwb2xpdGFuLWNob3JkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNuZWFwb2xpdGFuLWNob3JkIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmVhcG9saXRhbiBjaG9yZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBOZWFwb2xpdGFuIGNob3JkIGNvbnRhaW5zIGxvd2VyZWQgc2NhbGUtZGVncmVlIDIsIGFsb25nIHdpdGggc2NhbGUtZGVncmVlIDQsIGFuZCBsb3dlcmVkIHNjYWxlLWRlZ3JlZSA2OiAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyYSIpXSksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImZhIildKSwKICAgICAgICBfdm0uX3YoIiwgYW5kICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxlIildKSwKICAgICAgICBfdm0uX3YoIi4gSXQgaXMgYSBtYWpvciB0cmlhZCwgYW5kIGl0IHVzdWFsbHkgYXBwZWFycyB3aXRoICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImZhIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGluIHRoZSBiYXNzIChmaXJzdC1pbnZlcnNpb24pLCB3aGljaCBpcyBhbHNvIGRvdWJsZWQgaW4gYSBmb3VyLXZvaWNlIHRleHR1cmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkluIGEgUm9tYW4gbnVtZXJhbCBhbmFseXNpcywgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk4uIildKSwKICAgICAgICBfdm0uX3YoIiAob3IgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk4uIiksIF9jKCJzdXAiLCBbX3ZtLl92KCI2IildKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIpIHN1YnN0aXR1dGVzIGZvciBhIFJvbWFuIG51bWVyYWwgKHRoYXQgaXMsIGl0IGlzIG5vdCBsYWJlbGVkIGEgZmxhdC1JSSBjaG9yZCBpbiBjbGFzc2ljYWwgbXVzaWMpLiBBcyBhIGNocm9tYXRpY2FsbHkgYWx0ZXJlZCBzdWJkb21pbmFudCBjaG9yZCwgaXQgYWx3YXlzIGV4cHJlc3NlcyBzdWJvbWluYW50IGZ1bmN0aW9uICgiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUyIpXSksCiAgICAgICAgX3ZtLl92KCIpLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiBhIGZ1bmN0aW9uYWwgYmFzcyBhbmFseXNpcywgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk4uIildKSwKICAgICAgICBfdm0uX3YoIiBpcyBwbGFjZWQgYmVsb3cgdGhlIGZ1bmN0aW9uYWwgZGVzaWduYXRpb24gb2YgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIltTNF0iKV0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1NldmVyYWwgcHJvbWluZW50IE5lYXBvbGl0YW4gY2hvcmRzIG9jY3VyIGluICJEZXIgTcO8bGxlciB1bmQgZGVyIEJhY2giIGZyb20gU2NodWJlcnRcJ3Mgc29uZyBjeWNsZSwgJwogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiRGllIHNjaMO2bmUgTcO8bGxlcmluIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIChzb25nIG5vLiAxOSkuIE9uIHRoZSBzY29yZSBiZWxvdyAobW0uIDfigJMxMCBvZiB0aGUgc29uZyksIHRoZSB0b25pYyB0cmlhZCAoRyBtaW5vcikgaXMgZm9sbG93ZWQgYnkgYSBOZWFwb2xpdGFuLCB0aGVuIGEgZG9taW5hbnQtc2V2ZW50aCBjaG9yZCwgYW5kIHRoZW4gdG9uaWM6IFQg4oCTIFMg4oCTIEQg4oCTIFQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNzUlIiwgZGlzcGxheTogImJsb2NrIiwgbWFyZ2luOiAiYXV0byIgfSwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiAiR3JhcGhpY3MvRE1VREIucG5nIiwKICAgICAgICAgIGFsdDoKICAgICAgICAgICAgIk5lYXBvbGl0YW4gY2hvcmQgaW4gbW0uIDfigJMxMCBvZiBTY2h1YmVydCdzIERlciBNw7xsbGVyIHVuZCBkZXIgQmFjaC4iCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzoKICAgICAgICAgICAgImh0dHBzOi8vZW1iZWQuc3BvdGlmeS5jb20vP3VyaT1zcG90aWZ5JTNBdHJhY2slM0E0dktKWmZYSVU3YzNxUEtNZWdTREJXIiwKICAgICAgICAgIHdpZHRoOiAiMzAwIiwKICAgICAgICAgIGhlaWdodDogIjgwIiwKICAgICAgICAgIGZyYW1lYm9yZGVyOiAiMCIsCiAgICAgICAgICBhbGxvd3RyYW5zcGFyZW5jeTogInRydWUiCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhdWdtZW50ZWQtc2l4dGgtY2hvcmRzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhdWdtZW50ZWQtc2l4dGgtY2hvcmRzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQXVnbWVudGVkLXNpeHRoIGNob3JkcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkF1Z21lbnRlZC1zaXh0aCBjaG9yZHMgYXJlIHNvIG5hbWVkIGJlY2F1c2Ugb2YgdGhlIGF1Z21lbnRlZCBzaXh0aCB0aGF0IG9jY3VycyBiZXR3ZWVuICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxlIildKSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZmkiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIsIHR3byBzY2FsZS1kZWdyZWVzIHRoYXQgYXJlIHByZXNlbnQgaW4gZXZlcnkgYXVnbWVudGVkLXNpeHRoIGNob3JkLiBUaGUgb3RoZXIgcGl0Y2goZXMpIGluIHRoZSBjaG9yZCBkZXRlcm1pbmUgd2hpY2gga2luZCBvZiBhdWdtZW50ZWQtc2l4dGggY2hvcmQgaXMgcHJlc2VudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpdGFsaWFuLWF1Z21lbnRlZC1zaXh0aC1jaG9yZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaXRhbGlhbi1hdWdtZW50ZWQtc2l4dGgtY2hvcmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJdGFsaWFuIGF1Z21lbnRlZC1zaXh0aCBjaG9yZCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiSXRhbGlhbiBhdWdtZW50ZWQtc2l4dGggY2hvcmQiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgdGhlIHNpbXBsZXN0IGF1Z21lbnRlZC1zaXh0aCBjaG9yZCwgd2l0aCBvbmx5IHRocmVlIG1lbWJlcnM6ICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxlIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiLCBhbmQgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZmkiKV0pLAogICAgICAgIF92bS5fdigiLiAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJMZSIpXSksCiAgICAgICAgX3ZtLl92KCIgaXMgdHlwaWNhbGx5IHRoZSBiYXNzIG5vdGUsIGFuZCBpbiBhIGZvdXItdm9pY2UgdGV4dHVyZSwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgdHlwaWNhbGx5IHRoZSBwaXRjaCB0aGF0IGlzIGRvdWJsZWQuIChLZWVwIGluIG1pbmQgdGhhdCB5b3UgZG8gbm90IGRvdWJsZSB0aGUgYmFzcyBpbiBhIGNob3JkIG9mIHRoZSBzaXh0aCwgbm9yIGEgY2hyb21hdGljYWxseSBhbHRlcmVkIHRvbmUgc3VjaCBhcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJmaSIpXSksCiAgICAgICAgX3ZtLl92KCIuIFRodXMsICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImRvIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHJlbWFpbnMgYXMgdGhlIG9ubHkgdG9uZSB0aGF0IGNhbiBiZSBkb3VibGVkIGluIHN0cmljdCBzdHlsZSwgYW5kIHRoaXMgZG91YmxpbmcgdHlwaWNhbGx5IGNhcnJpZXMgaW50byBmcmVlciBzdHlsZXMsIGFzIHdlbGwuKSIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiBhIFJvbWFuIG51bWVyYWwgYW5hbHlzaXMsICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJdC4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgcmVwbGFjZXMgYSBSb21hbiBudW1lcmFsLiBUaGUgZmlndXJlZCBiYXNzIGlzIGEgc2ltcGxlIHNsYXNoZWQgIjYuIiBJdCBleHByZXNzZXMgc3ViZG9taW5hbnQgZnVuY3Rpb24gJwogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlMiKV0pLAogICAgICAgIF92bS5fdigiKS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiV2hlbiAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgb2NjdXJzIGluIHRoZSBiYXNzLCB0aGUgZnVuY3Rpb25hbC1iYXNzIGRlc2lnbmF0aW9uIGlzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJbUzZdIildKSwKICAgICAgICBfdm0uX3YoIi4gVW5kZXIgdGhhdCBmdW5jdGlvbmFsIGJhc3Mgc3ltYm9sLCB3ZSBhbHNvIGxhYmVsIHRoZSBjaG9yZCAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSXQuIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZm9sbG93aW5nIGV4YW1wbGUgaXMgZnJvbSBCZWV0aG92ZW4ncyBCYWdhdGVsbGUsIE9wLiAxMTksIE5vLiAxLCBtbS4gMeKAkzQuIEluIG0uIDMsIHRoZSBJdGFsaWFuIGF1Z21lbnRlZC1zaXh0aCBjaG9yZCBmYWxscyBvbiBiZWF0IDMsIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG9taW5hbnQgY2hvcmQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNzUlIiwgZGlzcGxheTogImJsb2NrIiwgbWFyZ2luOiAiYXV0byIgfSwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiAiR3JhcGhpY3MvT3AxMTktMS5wbmciLAogICAgICAgICAgYWx0OgogICAgICAgICAgICAiSXRhbGlhbiBhdWdtZW50ZWQtc2l4dGggY2hvcmQgaW4gbW0uIDHigJM0IG9mIEJlZXRob3ZlbidzIE9wLiAxMTksIE5vLiAxLiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnklM0F0cmFjayUzQTc5R3lNSHJOblF1RmFvdjJKTDdUaWgiLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZyZW5jaC1hdWdtZW50ZWQtc2l4dGgtY2hvcmQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2ZyZW5jaC1hdWdtZW50ZWQtc2l4dGgtY2hvcmQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBGcmVuY2ggYXVnbWVudGVkLXNpeHRoIGNob3JkIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJGcmVuY2ggYXVnbWVudGVkLXNpeHRoIGNob3JkIildKSwKICAgICAgICBfdm0uX3YoIiBoYXMgZm91ciBtZW1iZXJzOiAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJsZSIpXSksCiAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImRvIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigicmUiKV0pLAogICAgICAgIF92bS5fdigiLCBhbmQgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZmkiKV0pLAogICAgICAgIF92bS5fdigiLiBBcyBpbiB0aGUgSXRhbGlhbiBzaXh0aCwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibGUiKV0pLAogICAgICAgIF92bS5fdigiIGlzIHR5cGljYWxseSB0aGUgYmFzcyBub3RlLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiBhIFJvbWFuIG51bWVyYWwgYW5hbHlzaXMsICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJGci4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgcmVwbGFjZXMgYSBSb21hbiBudW1lcmFsLiBUaGUgZmlndXJlZCBiYXNzIGlzIGEgc2xhc2hlZCAiNiIgd2l0aCBhICI0IiBhbmQgYSAiMy4iIEl0IGV4cHJlc3NlcyBzdWJkb21pbmFudCBmdW5jdGlvbiAnCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUyIpXSksCiAgICAgICAgX3ZtLl92KCIpLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJXaGVuICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxlIildKSwKICAgICAgICBfdm0uX3YoIiBvY2N1cnMgaW4gdGhlIGJhc3MsIHRoZSBmdW5jdGlvbmFsLWJhc3MgZGVzaWduYXRpb24gaXMgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIltTNl0iKV0pLAogICAgICAgIF92bS5fdigiLiBVbmRlciB0aGF0IGZ1bmN0aW9uYWwgYmFzcyBzeW1ib2wsIHdlIGFsc28gbGFiZWwgdGhlIGNob3JkICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJGci4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1RoZSBmb2xsb3dpbmcgZXhhbXBsZSBpcyBmcm9tIE1vemFydFwncyBTdHJpbmcgUXVhcnRldCwgIkRpc3NvbmFuY2UsIiBLLiA0NjUsIGl2LiwgbW0uIDEw4oCTMTYuIFRoZSBGcmVuY2ggYXVnbWVudGVkLXNpeHRoIGNob3JkIG9jY3VycyBvbiBiZWF0IDIgb2YgbS4gMTQuIEluIHRoaXMgcGFzc2FnZSwgYSAibWlsZGVyIiBzdWJkb21pbmFudCBjaG9yZCAoJwogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIklWIiksIF9jKCJzdXAiLCBbX3ZtLl92KCI2IildKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIpIHByb2dyZXNzZXMgdG8gdGhlIG1vcmUgaW50ZW5zZSBGcmVuY2ggc2l4dGgsIHdoaWNoIHByb2dyZXNzZXMgaW50byB0aGUgY2FkZW50aWFsIDYvNCBiZWZvcmUgdGhlIGZpbmFsICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJW4oCTSS4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjc1JSIsIGRpc3BsYXk6ICJibG9jayIsIG1hcmdpbjogImF1dG8iIH0sCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogIkdyYXBoaWNzL0s0NjUtaXYucG5nIiwKICAgICAgICAgIGFsdDoKICAgICAgICAgICAgIkZyZW5jaCBhdWdtZW50ZWQtc2l4dGggY2hvcmQgaW4gbW0uIDEw4oCTMTYgb2YgTW96YXJ0J3MgU3RyaW5nIFF1YXJ0ZXQsIEsuIDQ2NSwgaXYuIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaWZyYW1lIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL2VtYmVkLnNwb3RpZnkuY29tLz91cmk9c3BvdGlmeSUzQXRyYWNrJTNBMzZ6S3haVWF2eXVTdFNxMFI0VDRJSCIsCiAgICAgICAgICB3aWR0aDogIjMwMCIsCiAgICAgICAgICBoZWlnaHQ6ICI4MCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3d0cmFuc3BhcmVuY3k6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZ2VybWFuLWF1Z21lbnRlZC1zaXh0aC1jaG9yZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZ2VybWFuLWF1Z21lbnRlZC1zaXh0aC1jaG9yZCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEdlcm1hbiBhdWdtZW50ZWQtc2l4dGggY2hvcmQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhlICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkdlcm1hbiBhdWdtZW50ZWQtc2l4dGggY2hvcmQiKV0pLAogICAgICAgIF92bS5fdigiIGhhcyBmb3VyIG1lbWJlcnM6ICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxlIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJtZSIpXSksCiAgICAgICAgX3ZtLl92KCIsIGFuZCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJmaSIpXSksCiAgICAgICAgX3ZtLl92KCIuIEFzIGluIHRoZSBvdGhlciBhdWdtZW50ZWQgc2l4dGggY2hvcmRzLCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgaXMgdHlwaWNhbGx5IHRoZSBiYXNzIG5vdGUuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkluIGEgUm9tYW4gbnVtZXJhbCBhbmFseXNpcywgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdlci4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgcmVwbGFjZXMgYSBSb21hbiBudW1lcmFsLiBUaGUgZmlndXJlZCBiYXNzIGlzIGEgc2xhc2hlZCAiNiIgd2l0aCBhICI1LiIgSXQgZXhwcmVzc2VzIHN1YmRvbWluYW50IGZ1bmN0aW9uICcKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTIildKSwKICAgICAgICBfdm0uX3YoIikuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldoZW4gIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibGUiKV0pLAogICAgICAgIF92bS5fdigiIG9jY3VycyBpbiB0aGUgYmFzcywgdGhlIGZ1bmN0aW9uYWwtYmFzcyBkZXNpZ25hdGlvbiBpcyAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiW1M2XSIpXSksCiAgICAgICAgX3ZtLl92KCIuIFVuZGVyIHRoYXQgZnVuY3Rpb25hbCBiYXNzIHN5bWJvbCwgd2UgYWxzbyBsYWJlbCB0aGUgY2hvcmQgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdlci4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBHZXJtYW4gc2l4dGggaXMgYWxtb3N0IGFsd2F5cyB1c2VkIGluIG1pbm9yIGFuZCBmb2xsb3dlZCBieSBhIGNhZGVudGlhbCA2LzQgY2hvcmQsIHdpdGggIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibWUiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkbyIpXSksCiAgICAgICAgX3ZtLl92KCIgY2Fycnlpbmcgb3ZlciBpbnRvIHRoZSBjYWRlbnRpYWwgNi80LiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIEJlZXRob3ZlbidzIFBpYW5vIFNvbmF0YSBpbiBFIE1ham9yLCBPcC4gMTA5LCBpaWkuLCBhIEdlcm1hbiBhdWdtZW50ZWQtc2l4dGggY2hvcmQgb2NjdXJzIG9uIHRoZSBsYXN0IGJlYXQgb2YgbS4gNyBhbmQgY2FycmllcyBvdmVyIGludG8gbS4gOCBiZWZvcmUgcmVsZWFzaW5nIHRlbnNpb24gaW50byB0aGUgaGFsZiBjYWRlbmNlIGF0IHRoZSBlbmQgb2YgbS4gOC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI3NSUiLCBkaXNwbGF5OiAiYmxvY2siLCBtYXJnaW46ICJhdXRvIiB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6ICJHcmFwaGljcy9PcDEwOS1paWkucG5nIiwKICAgICAgICAgIGFsdDoKICAgICAgICAgICAgIkdlcm1hbiBhdWdtZW50ZWQtc2l4dGggY2hvcmQgaW4gbW0uIDHigJM4IG9mIEJlZXRob3ZlbidzIFBpYW5vIFNvbmF0YSwgT3AuIDEwOSwgaWlpLiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnklM0F0cmFjayUzQTAwVnhvcXY2b0docmNtdWdrN1RBWEIiLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN3aXNzLWF1Z21lbnRlZC1zaXh0aC1jaG9yZCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3dpc3MtYXVnbWVudGVkLXNpeHRoLWNob3JkIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3dpc3MgYXVnbWVudGVkLXNpeHRoIGNob3JkIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTd2lzcyBhdWdtZW50ZWQtc2l4dGggY2hvcmQiKV0pLAogICAgICAgIF92bS5fdigiIGhhcyBmb3VyIG1lbWJlcnM6ICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImxlIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiZG8iKV0pLAogICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyaSIpXSksCiAgICAgICAgX3ZtLl92KCIsIGFuZCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJmaSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJy4gVGhpcyBjaG9yZCBpcyBuYW1lZCAiU3dpc3MiIGJlY2F1c2UgaXQgc291bmRzIEdlcm1hbiBidXQgaXMgc3BlbGxlZCBsaWtlIHRoZSBGcmVuY2guICgnCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyaSIpXSksCiAgICAgICAgX3ZtLl92KCIgaW4gcGxhY2Ugb2YgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibWUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIpIChTd2l0emVybGFuZCBoYXMgYSBtaXh0dXJlIG9mIEdlcm1hbi0sIEZyZW5jaC0sIEl0YWxpYW4tLCBhbmQgUm9tYW5zY2gtYmFzZWQgbGFuZ3VhZ2VzLCB3aXRoIEdlcm1hbiBhbmQgRnJlbmNoIGJlaW5nIHRoZSBsYXJnZXN0LikgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiTGUiKV0pLAogICAgICAgIF92bS5fdigiIGlzIHR5cGljYWxseSB0aGUgYmFzcyBub3RlLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiBhIFJvbWFuIG51bWVyYWwgYW5hbHlzaXMsICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTdy4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgcmVwbGFjZXMgYSBSb21hbiBudW1lcmFsLiBUaGUgZmlndXJlZCBiYXNzIGlzIGEgc2xhc2hlZCAiNiIgd2l0aCBhIHNsYXNoZWQgIjQiIGFuZCBhICIzLiIgSXQgZXhwcmVzc2VzIHN1YmRvbWluYW50IGZ1bmN0aW9uICcKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTIildKSwKICAgICAgICBfdm0uX3YoIikuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIldoZW4gIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibGUiKV0pLAogICAgICAgIF92bS5fdigiIG9jY3VycyBpbiB0aGUgYmFzcywgdGhlIGZ1bmN0aW9uYWwtYmFzcyBkZXNpZ25hdGlvbiBpcyAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiW1M2XSIpXSksCiAgICAgICAgX3ZtLl92KCIuIFVuZGVyIHRoYXQgZnVuY3Rpb25hbCBiYXNzIHN5bWJvbCwgd2UgYWxzbyBsYWJlbCB0aGUgY2hvcmQgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN3LiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGlrZSB0aGUgR2VybWFuIHNpeHRoLCB0aGUgU3dpc3MgYXVnbWVudGVkLXNpeHRoIGlzIGFsbW9zdCBhbHdheXMgZm9sbG93ZWQgYnkgYSBjYWRlbnRpYWwgNi80IGNob3JkLiBIb3dldmVyLCB0aGUgU3dpc3MgY2hvcmQgdGVuZHMgdG8gYXBwZWFyIGluIG1ham9yIGtleXMsIHdpdGggIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigicmkiKV0pLAogICAgICAgIF92bS5fdigiIHByb2NlZWRpbmcgdG8gIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibWkiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkbyIpXSksCiAgICAgICAgX3ZtLl92KCIgY2Fycnlpbmcgb3ZlciBpbnRvIHRoZSBjYWRlbnRpYWwgNi80LiIpCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}