{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\externalExpansions.md?vue&type=template&id=5c8affc8&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\externalExpansions.md","mtime":1588347697075},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBIHRoZW1lIGlzIG9mdGVuIHByZWNlZGVkIG9yIGZvbGxvd2VkIGJ5IG1hdGVyaWFsIG91dHNpZGUgb2YgaXRzIHR5cGljYWwgYm91bmRhcmllcywgYnV0IHdoaWNoIGlzIGNsZWFybHkgZGVwZW5kZW50IG9uIHRoZSB0aGVtZS4gVGhpcyBtYXRlcmlhbCBpcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJleHRlcm5hbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJyB0byB0aGUgdGhlbWUgaXRzZWxm4oCUIOKAnGJlZm9yZS10aGUtYmVnaW5uaW5n4oCdIG9yIOKAnGFmdGVyLXRoZS1lbmQsIiBhcyBXaWxsaWFtIENhcGxpbiBhcyB0ZXJtZWQgaXQuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicHJlZml4IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwcmVmaXgiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBQcmVmaXgiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkFuICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigicHJlZml4IildKSwKICAgICAgICAgIF92bS5fdigiIGlzIGEgcGFzc2FnZeKAlHNob3J0IG9yICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9zb25hdGFGcmFtaW5nTW9kdWxlcy5odG1sI2ludHJvZHVjdGlvbiIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJsb25nIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCLigJR0aGF0ICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigicHJlY2VkZXMiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGEgdGhlbWUuIFNob3J0IHByZWZpeGVzIGxhY2sgZGlzdGluY3QgbW90aXZpYyBtYXRlcmlhbCBhbmQvb3IgaGFybW9uaWMgcHJvZ3Jlc3Npb24uIFdoaWxlIGNvbm5lY3RlZCB0byB0aGUgdGhlbWUgdGhhdCBmb2xsb3dzLCB3aGVuIHJlbW92ZWQgcHJlZml4ZXMgZG8gbm90IGRpc3R1cmIgdGhlIGxvZ2ljIG9mIHRoZSBwaHJhc2UgaXRzZWxmLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJmaWd1cmUiLCBbCiAgICAgICAgX2MoImltZyIsIHsgYXR0cnM6IHsgc3JjOiAiR3JhcGhpY3MvZm9ybS9zeW0xMDEucG5nIiB9IH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgW192bS5fdignUHJlZml4OiBIYXlkbiwgU3ltcGhvbnkgTm8uIDEwMSwgIkNsb2NrJyldKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzoKICAgICAgICAgICAgImh0dHBzOi8vZW1iZWQuc3BvdGlmeS5jb20vP3VyaT1zcG90aWZ5OnRyYWNrOjNKbGJlbFppc1RUd0VoNmUxM3VSeVEiLAogICAgICAgICAgd2lkdGg6ICIzMDAiLAogICAgICAgICAgaGVpZ2h0OiAiODAiLAogICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgIGFsbG93dHJhbnNwYXJlbmN5OiAidHJ1ZSIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhlcmUsIGEgb25lLW1lYXN1cmUsIGFjY29tcGFuaW1lbnRhbCBwcmVmaXggcHJlcGFyZXMgdGhlIGZvdXItbWVhc3VyZSBhbnRlY2VkZW50IHBocmFzZSB0aGF0IGJlZ2lucyBpbiBtLiAyLiBUaGUgcHJlZml4IGxhY2tzIGJvdGggYSBjaGFyYWN0ZXJpc3RpYyBtZWxvZHkgYW5kIGhhcm1vbmljIHByb2dyZXNzaW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN1ZmZpeCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc3VmZml4IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3VmZml4IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBzdWZmaXggcHJvbG9uZ3MgdGhlIGhhcm1vbnkgdGhhdCBjbG9zZWQgdGhlIHRoZW1lLiBTdWZmaXhlcyBhcmUgZGVzY3JpYmVkLCBhbmQgZ2l2ZW4gZGlmZmVyZW50IG5hbWVzLCBhY2NvcmRpbmcgdG8gd2hhdCBraW5kIG9mIGNhZGVuY2UsIFBBQyBvciBIQywgZW5kcyB0aGUgdGhlbWUgdG8gd2hpY2ggdGhleSBhcmUgYXR0YWNoZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIiMjI0Nsb3Npbmcgc2VjdGlvbnMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTb21ldGltZXMgY2FsbGVkICIpLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImNvZGV0dGFzIildKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiY2xvc2luZyBzZWN0aW9ucyIpXSksCiAgICAgICAgX3ZtLl92KCIgZm9sbG93IHRoZW1lcyB0aGF0IGVuZCB3aXRoIFBBQ3MuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL2Zvcm0vazMzMC5wbmciIH0gfSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImZpZ2NhcHRpb24iLCBbCiAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIiAoQ2xpY2sgdGhlIGltYWdlIHRvIHpvb20hKS4gIildKSwKICAgICAgICAgIF92bS5fdigiQ2xvc2luZyBTZWN0aW9uOiBNb3phcnQsIFBpYW5vIFNvbmF0YSBpbiBDIG1ham9yLCBLLiAzMzAiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnk6dHJhY2s6M1psSVhkcDk0aTZxcGZveDhTdTZMbCIsCiAgICAgICAgICB3aWR0aDogIjMwMCIsCiAgICAgICAgICBoZWlnaHQ6ICI4MCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3d0cmFuc3BhcmVuY3k6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJUaGUgIiksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvY29tcG91bmRQZXJpb2QuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiY29tcG91bmQgcGVyaW9kIikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGhlcmUgZW5kcyB3aXRoIGEgUEFDIGluIG0uIDE2LiBGb2xsb3dpbmcgdGhlIGNhZGVuY2UsIGEgZml2ZS1tZWFzdXJlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJjbG9zaW5nIHNlY3Rpb24iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHNlcnZlcyB0byBjb25maXJtIGl0LiBOb3RpY2UgdGhhdCB0aGUgbWVsb2R5IGlzIGNlbnRlcmVkIGFyb3VuZCBzY2FsZSBkZWdyZWUgMeKAlGEgY29tbW9uIGZlYXR1cmUgb2YgdGhlc2UgcGFzc2FnZXPigJRhbmQgdGhhdCBoYXJtb25pY2FsbHkgdGhlIGlp4oCTVi1JIGNhZGVudGlhbCBwcm9ncmVzc2lvbiB0aGF0IGVuZGVkIHRoZSB0aGVtZSAoc2VlIG0uIDE1IGFuZCAxNikgaXMgc2ltcGx5IHJlcGVhdGVkLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiIyMjU3RhbmRpbmcgb24gdGhlIERvbWluYW50IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIldoZW4gYSAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInN1ZmZpeCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBmb2xsb3dzIGEgaGFsZiBjYWRlbmNlLCB3ZSByZWZlciB0byBpdCBhcyAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInN0YW5kaW5nIG9uIHRoZSBkb21pbmFudCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIFRoZXNlIHBhc3NhZ2VzIGFyZSBvZnRlbiBzaWduYWxzIGZvciB0aGVtYXRpYyBlbnRyYW5jZXMgKHN1Y2ggYXMgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3NvbmF0YVRoZW1hdGljTW9kdWxlcy5odG1sI3N1Ym9yZGluYXRlLXRoZW1lLW1vZHVsZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInNlY29uZCB0aGVtZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBvZiBhIHNvbmF0YSBmb3JtIG1vdmVtZW50KSBvciB0aGVtYXRpYyByZXR1cm5zIChzdWNoIGFzIHRoZSByZWNhcGl0dWxhdGlvbiBpbiBhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3NtYWxsVGVybmFyeS5odG1sI3RocmVlLXRoZW1hdGljLWZ1bmN0aW9ucyIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJzbWFsbCB0ZXJuYXJ5IildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIpLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZmlndXJlIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIkdyYXBoaWNzL2Zvcm0vc3ltNDAucG5nIiB9IH0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJmaWdjYXB0aW9uIiwgWwogICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCIgKENsaWNrIHRoZSBpbWFnZSB0byB6b29tISkuICIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgU3RhbmRpbmcgb24gdGhlIERvbWluYW50OiBNb3phcnQsIFN5bXBob255IE5vLiA0MCwgSy4gNTUwLCBpIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly9lbWJlZC5zcG90aWZ5LmNvbS8/dXJpPXNwb3RpZnk6dHJhY2s6MDR6YXUwRTBWc3BnaXFOdlRxQ083dSIsCiAgICAgICAgICB3aWR0aDogIjMwMCIsCiAgICAgICAgICBoZWlnaHQ6ICI4MCIsCiAgICAgICAgICBmcmFtZWJvcmRlcjogIjAiLAogICAgICAgICAgYWxsb3d0cmFuc3BhcmVuY3k6ICJ0cnVlIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJUaGlzIGZhbW91cyBleGFtcGxlIGJlZ2lucyB3aXRoIGEgb25lLW1lYXN1cmUgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2V4dGVybmFsRXhwYW5zaW9ucy5odG1sI3ByZWZpeCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJwcmVmaXgiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBmb2xsb3dlZCBhICIpLAogICAgICAgICAgX2MoIlJvdXRlckxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiL2NvbXBvdW5kU2VudGVuY2UuaHRtbCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiY29tcG91bmQgc2VudGVuY2UiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIFRoZSBjb21wb3VuZCBzZW50ZW5jZSBlbmRzIHdpdGggYSBoYWxmIGNhZGVuY2UgaW4gbS4gMTYuIChOb3RpY2UgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgdG86ICIvYWx0ZXJlZFN1YmRvbWluYW50cy5odG1sI2F1Z21lbnRlZC1zaXh0aC1jaG9yZHMiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiYXVnbWVudGVkIHNpeHRoIGNob3JkIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgdGhhdCBwcmVjZWRlcyBpdC4pIFRoZSBzdWNjZWVkaW5nIG1lYXN1cmVzICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigic3RhbmQgb24gdGhlIGRvbWluYW50LCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgcHJvbG9uZ2luZyB0aGUgY2FkZW5jZSBieSBlbXBoYXNpemluZyBkb21pbmFudCBoYXJtb255IHdpdGggc2NhbGUgZGVncmVlIDUgZW1iZWxsaXNoZWQgbWVsb2RpY2FsbHkuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}