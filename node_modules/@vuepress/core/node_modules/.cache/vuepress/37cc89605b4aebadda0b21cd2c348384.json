{"remainingRequest":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!K:\\Workspace\\web\\openmusic_reskin\\docs\\about.md?vue&type=template&id=75271694&","dependencies":[{"path":"K:\\Workspace\\web\\openmusic_reskin\\docs\\about.md","mtime":1588249152874},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"K:\\Workspace\\web\\openmusic_reskin\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}